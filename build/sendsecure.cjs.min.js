"use strict";function arrayReduce$1(e,t,a,r){var n=-1,s=null==e?0:e.length;for(r&&s&&(a=e[++n]);++n<s;)a=t(a,e[n],n,e);return a}function createBaseFor$1(e){return function(t,a,r){for(var n=-1,s=Object(t),o=r(t),i=o.length;i--;){var c=o[e?i:++n];if(a(s[c],c,s)===!1)break}return t}}function baseTimes$1(e,t){for(var a=-1,r=Array(e);++a<e;)r[a]=t(a);return r}function createCommonjsModule(e,t){return t={exports:{}},e(t,t.exports),t.exports}function getRawTag$1(e){var t=hasOwnProperty$2.call(e,symToStringTag$1),a=e[symToStringTag$1];try{e[symToStringTag$1]=void 0;var r=!0}catch(e){}var n=nativeObjectToString.call(e);return r&&(t?e[symToStringTag$1]=a:delete e[symToStringTag$1]),n}function objectToString$1(e){return nativeObjectToString$1.call(e)}function baseGetTag$1(e){return null==e?void 0===e?undefinedTag:nullTag:(e=Object(e),symToStringTag&&symToStringTag in e?getRawTag(e):objectToString(e))}function isObjectLike$2(e){return null!=e&&"object"==typeof e}function baseIsArguments$1(e){return isObjectLike$1(e)&&baseGetTag(e)==argsTag}function stubFalse(){return!1}function isIndex$1(e,t){return t=null==t?MAX_SAFE_INTEGER:t,!!t&&("number"==typeof e||reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function isLength$1(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER$1}function baseIsTypedArray$1(e){return isObjectLike$3(e)&&isLength(e.length)&&!!typedArrayTags[baseGetTag$2(e)]}function baseUnary$1(e){return function(t){return e(t)}}function arrayLikeKeys$1(e,t){var a=isArray$2(e),r=!a&&isArguments(e),n=!a&&!r&&isBuffer(e),s=!a&&!r&&!n&&isTypedArray(e),o=a||r||n||s,i=o?baseTimes(e.length,String):[],c=i.length;for(var u in e)!t&&!hasOwnProperty.call(e,u)||o&&("length"==u||n&&("offset"==u||"parent"==u)||s&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||isIndex(u,c))||i.push(u);return i}function isPrototype$1(e){var t=e&&e.constructor,a="function"==typeof t&&t.prototype||objectProto$5;return e===a}function overArg$1(e,t){return function(a){return e(t(a))}}function baseKeys$1(e){if(!isPrototype(e))return nativeKeys(e);var t=[];for(var a in Object(e))hasOwnProperty$3.call(e,a)&&"constructor"!=a&&t.push(a);return t}function isObject$1(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function isFunction$1(e){if(!isObject(e))return!1;var t=baseGetTag$3(e);return t==funcTag$1||t==genTag||t==asyncTag||t==proxyTag}function isArrayLike$1(e){return null!=e&&isLength$2(e.length)&&!isFunction(e)}function keys$1(e){return isArrayLike(e)?arrayLikeKeys(e):baseKeys(e)}function baseForOwn$1(e,t){return e&&baseFor(e,t,keys)}function createBaseEach$1(e,t){return function(a,r){if(null==a)return a;if(!isArrayLike$2(a))return e(a,r);for(var n=a.length,s=t?n:-1,o=Object(a);(t?s--:++s<n)&&r(o[s],s,o)!==!1;);return a}}function listCacheClear$1(){this.__data__=[],this.size=0}function eq$1(e,t){return e===t||e!==e&&t!==t}function assocIndexOf$1(e,t){for(var a=e.length;a--;)if(eq(e[a][0],t))return a;return-1}function listCacheDelete$1(e){var t=this.__data__,a=assocIndexOf(t,e);if(a<0)return!1;var r=t.length-1;return a==r?t.pop():splice.call(t,a,1),--this.size,!0}function listCacheGet$1(e){var t=this.__data__,a=assocIndexOf$2(t,e);return a<0?void 0:t[a][1]}function listCacheHas$1(e){return assocIndexOf$3(this.__data__,e)>-1}function listCacheSet$1(e,t){var a=this.__data__,r=assocIndexOf$4(a,e);return r<0?(++this.size,a.push([e,t])):a[r][1]=t,this}function ListCache$1(e){var t=-1,a=null==e?0:e.length;for(this.clear();++t<a;){var r=e[t];this.set(r[0],r[1])}}function stackClear$1(){this.__data__=new ListCache$2,this.size=0}function stackDelete$1(e){var t=this.__data__,a=t.delete(e);return this.size=t.size,a}function stackGet$1(e){return this.__data__.get(e)}function stackHas$1(e){return this.__data__.has(e)}function isMasked$1(e){return!!maskSrcKey&&maskSrcKey in e}function toSource$1(e){if(null!=e){try{return funcToString$1.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function baseIsNative$1(e){if(!isObject$2(e)||isMasked(e))return!1;var t=isFunction$2(e)?reIsNative:reIsHostCtor;return t.test(toSource(e))}function getValue$1(e,t){return null==e?void 0:e[t]}function getNative$1(e,t){var a=getValue(e,t);return baseIsNative(a)?a:void 0}function hashClear$1(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete$1(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}function hashGet$1(e){var t=this.__data__;if(nativeCreate$2){var a=t[e];return a===HASH_UNDEFINED?void 0:a}return hasOwnProperty$5.call(t,e)?t[e]:void 0}function hashHas$1(e){var t=this.__data__;return nativeCreate$3?void 0!==t[e]:hasOwnProperty$6.call(t,e)}function hashSet$1(e,t){var a=this.__data__;return this.size+=this.has(e)?0:1,a[e]=nativeCreate$4&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash$1(e){var t=-1,a=null==e?0:e.length;for(this.clear();++t<a;){var r=e[t];this.set(r[0],r[1])}}function mapCacheClear$1(){this.size=0,this.__data__={hash:new Hash,map:new(Map$2||ListCache$4),string:new Hash}}function isKeyable$1(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function getMapData$1(e,t){var a=e.__data__;return isKeyable(t)?a["string"==typeof t?"string":"hash"]:a.map}function mapCacheDelete$1(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet$1(e){return getMapData$2(this,e).get(e)}function mapCacheHas$1(e){return getMapData$3(this,e).has(e)}function mapCacheSet$1(e,t){var a=getMapData$4(this,e),r=a.size;return a.set(e,t),this.size+=a.size==r?0:1,this}function MapCache$1(e){var t=-1,a=null==e?0:e.length;for(this.clear();++t<a;){var r=e[t];this.set(r[0],r[1])}}function stackSet$1(e,t){var a=this.__data__;if(a instanceof ListCache$3){var r=a.__data__;if(!Map||r.length<LARGE_ARRAY_SIZE-1)return r.push([e,t]),this.size=++a.size,this;a=this.__data__=new MapCache(r)}return a.set(e,t),this.size=a.size,this}function Stack$1(e){var t=this.__data__=new ListCache(e);this.size=t.size}function setCacheAdd$1(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}function setCacheHas$1(e){return this.__data__.has(e)}function SetCache$1(e){var t=-1,a=null==e?0:e.length;for(this.__data__=new MapCache$2;++t<a;)this.add(e[t])}function arraySome$1(e,t){for(var a=-1,r=null==e?0:e.length;++a<r;)if(t(e[a],a,e))return!0;return!1}function cacheHas$1(e,t){return e.has(t)}function equalArrays$1(e,t,a,r,n,s){var o=a&COMPARE_PARTIAL_FLAG$2,i=e.length,c=t.length;if(i!=c&&!(o&&c>i))return!1;var u=s.get(e);if(u&&s.get(t))return u==t;var l=-1,p=!0,y=a&COMPARE_UNORDERED_FLAG$1?new SetCache:void 0;for(s.set(e,t),s.set(t,e);++l<i;){var h=e[l],_=t[l];if(r)var f=o?r(_,h,l,t,e,s):r(h,_,l,e,t,s);if(void 0!==f){if(f)continue;p=!1;break}if(y){if(!arraySome(t,function(e,t){if(!cacheHas(y,t)&&(h===e||n(h,e,a,r,s)))return y.push(t)})){p=!1;break}}else if(h!==_&&!n(h,_,a,r,s)){p=!1;break}}return s.delete(e),s.delete(t),p}function mapToArray$1(e){var t=-1,a=Array(e.size);return e.forEach(function(e,r){a[++t]=[r,e]}),a}function setToArray$1(e){var t=-1,a=Array(e.size);return e.forEach(function(e){a[++t]=e}),a}function equalByTag$1(e,t,a,r,n,s,o){switch(a){case dataViewTag$1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case arrayBufferTag$1:return!(e.byteLength!=t.byteLength||!s(new Uint8Array(e),new Uint8Array(t)));case boolTag$1:case dateTag$1:case numberTag$1:return eq$2(+e,+t);case errorTag$1:return e.name==t.name&&e.message==t.message;case regexpTag$1:case stringTag$1:return e==t+"";case mapTag$1:var i=mapToArray;case setTag$1:var c=r&COMPARE_PARTIAL_FLAG$3;if(i||(i=setToArray),e.size!=t.size&&!c)return!1;var u=o.get(e);if(u)return u==t;r|=COMPARE_UNORDERED_FLAG$2,o.set(e,t);var l=equalArrays$2(i(e),i(t),r,n,s,o);return o.delete(e),l;case symbolTag:if(symbolValueOf)return symbolValueOf.call(e)==symbolValueOf.call(t)}return!1}function equalObjects$1(e,t,a,r,n,s){var o=a&COMPARE_PARTIAL_FLAG$4,i=keys$2(e),c=i.length,u=keys$2(t),l=u.length;if(c!=l&&!o)return!1;for(var p=c;p--;){var y=i[p];if(!(o?y in t:hasOwnProperty$8.call(t,y)))return!1}var h=s.get(e);if(h&&s.get(t))return h==t;var _=!0;s.set(e,t),s.set(t,e);for(var f=o;++p<c;){y=i[p];var $=e[y],b=t[y];if(r)var g=o?r(b,$,y,t,e,s):r($,b,y,e,t,s);if(!(void 0===g?$===b||n($,b,a,r,s):g)){_=!1;break}f||(f="constructor"==y)}if(_&&!f){var d=e.constructor,m=t.constructor;d!=m&&"constructor"in e&&"constructor"in t&&!("function"==typeof d&&d instanceof d&&"function"==typeof m&&m instanceof m)&&(_=!1)}return s.delete(e),s.delete(t),_}function baseIsEqualDeep$1(e,t,a,r,n,s){var o=isArray$4(e),i=isArray$4(t),c=arrayTag$1,u=arrayTag$1;o||(c=getTag(e),c=c==argsTag$2?objectTag$1:c),i||(u=getTag(t),u=u==argsTag$2?objectTag$1:u);var l=c==objectTag$1,p=u==objectTag$1,y=c==u;if(y&&isBuffer$1(e)){if(!isBuffer$1(t))return!1;o=!0,l=!1}if(y&&!l)return s||(s=new Stack$2),o||isTypedArray$2(e)?equalArrays(e,t,a,r,n,s):equalByTag(e,t,c,a,r,n,s);if(!(a&COMPARE_PARTIAL_FLAG$1)){var h=l&&hasOwnProperty$7.call(e,"__wrapped__"),_=p&&hasOwnProperty$7.call(t,"__wrapped__");if(h||_){var f=h?e.value():e,$=_?t.value():t;return s||(s=new Stack$2),n(f,$,a,r,s)}}return!!y&&(s||(s=new Stack$2),equalObjects(e,t,a,r,n,s))}function baseIsEqual$1(e,t,a,r,n){return e===t||(null==e||null==t||!isObject$3(e)&&!isObjectLike$4(t)?e!==e&&t!==t:baseIsEqualDeep(e,t,a,r,baseIsEqual$1,n))}function baseIsMatch$1(e,t,a,r){var n=a.length,s=n,o=!r;if(null==e)return!s;for(e=Object(e);n--;){var i=a[n];if(o&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++n<s;){i=a[n];var c=i[0],u=e[c],l=i[1];if(o&&i[2]){if(void 0===u&&!(c in e))return!1}else{var p=new Stack;if(r)var y=r(u,l,c,e,t,p);if(!(void 0===y?baseIsEqual(l,u,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,r,p):y))return!1}}return!0}function isStrictComparable$1(e){return e===e&&!isObject$4(e)}function getMatchData$1(e){for(var t=keys$3(e),a=t.length;a--;){var r=t[a],n=e[r];t[a]=[r,n,isStrictComparable(n)]}return t}function matchesStrictComparable$1(e,t){return function(a){return null!=a&&(a[e]===t&&(void 0!==t||e in Object(a)))}}function baseMatches$1(e){var t=getMatchData(e);return 1==t.length&&t[0][2]?matchesStrictComparable(t[0][0],t[0][1]):function(a){return a===e||baseIsMatch(a,e,t)}}function isSymbol$1(e){return"symbol"==typeof e||isObjectLike$5(e)&&baseGetTag$5(e)==symbolTag$1}function isKey$2(e,t){if(isArray$6(e))return!1;var a=typeof e;return!("number"!=a&&"symbol"!=a&&"boolean"!=a&&null!=e&&!isSymbol(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}function memoize$1(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var a=function(){var r=arguments,n=t?t.apply(this,r):r[0],s=a.cache;if(s.has(n))return s.get(n);var o=e.apply(this,r);return a.cache=s.set(n,o)||s,o};return a.cache=new(memoize$1.Cache||MapCache$3),a}function memoizeCapped$1(e){var t=memoize(e,function(e){return a.size===MAX_MEMOIZE_SIZE&&a.clear(),e}),a=t.cache;return t}function arrayMap$1(e,t){for(var a=-1,r=null==e?0:e.length,n=Array(r);++a<r;)n[a]=t(e[a],a,e);return n}function baseToString$1(e){if("string"==typeof e)return e;if(isArray$7(e))return arrayMap(e,baseToString$1)+"";if(isSymbol$2(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return"0"==t&&1/e==-INFINITY?"-0":t}function toString$1(e){return null==e?"":baseToString(e)}function castPath$1(e,t){return isArray$5(e)?e:isKey$1(e,t)?[e]:stringToPath(toString(e))}function toKey$2(e){if("string"==typeof e||isSymbol$3(e))return e;var t=e+"";return"0"==t&&1/e==-INFINITY$1?"-0":t}function baseGet$1(e,t){t=castPath(t,e);for(var a=0,r=t.length;null!=e&&a<r;)e=e[toKey$1(t[a++])];return a&&a==r?e:void 0}function get$1(e,t,a){var r=null==e?void 0:baseGet(e,t);return void 0===r?a:r}function baseHasIn$1(e,t){return null!=e&&t in Object(e)}function hasPath$1(e,t,a){t=castPath$2(t,e);for(var r=-1,n=t.length,s=!1;++r<n;){var o=toKey$3(t[r]);if(!(s=null!=e&&a(e,o)))break;e=e[o]}return s||++r!=n?s:(n=null==e?0:e.length,!!n&&isLength$3(n)&&isIndex$2(o,n)&&(isArray$8(e)||isArguments$2(e)))}function hasIn$1(e,t){return null!=e&&hasPath(e,t,baseHasIn)}function baseMatchesProperty$1(e,t){return isKey(e)&&isStrictComparable$2(t)?matchesStrictComparable$2(toKey(e),t):function(a){var r=get(a,e);return void 0===r&&r===t?hasIn(a,e):baseIsEqual$2(t,r,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}function identity$1(e){return e}function baseProperty$1(e){return function(t){return null==t?void 0:t[e]}}function basePropertyDeep$1(e){return function(t){return baseGet$2(t,e)}}function property$1(e){return isKey$3(e)?baseProperty(toKey$4(e)):basePropertyDeep(e)}function baseIteratee$1(e){return"function"==typeof e?e:null==e?identity:"object"==typeof e?isArray$3(e)?baseMatchesProperty(e[0],e[1]):baseMatches(e):property(e)}function baseReduce$1(e,t,a,r,n){return n(e,function(e,n,s){a=r?(r=!1,e):t(a,e,n,s)}),a}function reduce(e,t,a){var r=isArray$1(e)?arrayReduce:baseReduce,n=arguments.length<3;return r(e,baseIteratee(t,4),a,n,baseEach)}function baseMap$1(e,t){var a=-1,r=isArrayLike$3(e)?Array(e.length):[];return baseEach$2(e,function(e,n,s){r[++a]=t(e,n,s)}),r}function map(e,t){var a=isArray$9(e)?arrayMap$2:baseMap;return a(e,baseIteratee$2(t,3))}function arrayEvery$1(e,t){for(var a=-1,r=null==e?0:e.length;++a<r;)if(!t(e[a],a,e))return!1;return!0}function baseEvery$1(e,t){var a=!0;return baseEach$3(e,function(e,r,n){return a=!!t(e,r,n)}),a}function isIterateeCall$1(e,t,a){if(!isObject$5(a))return!1;var r=typeof t;return!!("number"==r?isArrayLike$4(a)&&isIndex$3(t,a.length):"string"==r&&t in a)&&eq$3(a[t],e)}function every(e,t,a){var r=isArray$10(e)?arrayEvery:baseEvery;return a&&isIterateeCall(e,t,a)&&(t=void 0),r(e,baseIteratee$3(t,3))}function baseSome$1(e,t){var a;return baseEach$4(e,function(e,r,n){return a=t(e,r,n),!a}),!!a}function some(e,t,a){var r=isArray$11(e)?arraySome$2:baseSome;return a&&isIterateeCall$2(e,t,a)&&(t=void 0),r(e,baseIteratee$4(t,3))}function createFind$1(e){return function(t,a,r){var n=Object(t);if(!isArrayLike$5(t)){var s=baseIteratee$5(a,3);t=keys$4(t),a=function(e){return s(n[e],e,n)}}var o=e(t,a,r);return o>-1?n[s?t[o]:o]:void 0}}function baseFindIndex$1(e,t,a,r){for(var n=e.length,s=a+(r?1:-1);r?s--:++s<n;)if(t(e[s],s,e))return s;return-1}function toNumber$1(e){if("number"==typeof e)return e;if(isSymbol$4(e))return NAN;if(isObject$6(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=isObject$6(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(reTrim,"");var a=reIsBinary.test(e);return a||reIsOctal.test(e)?freeParseInt(e.slice(2),a?2:8):reIsBadHex.test(e)?NAN:+e}function toFinite$1(e){if(!e)return 0===e?e:0;if(e=toNumber(e),e===INFINITY$2||e===-INFINITY$2){var t=e<0?-1:1;return t*MAX_INTEGER}return e===e?e:0}function toInteger$1(e){var t=toFinite(e),a=t%1;return t===t?a?t-a:t:0}function findIndex$1(e,t,a){var r=null==e?0:e.length;if(!r)return-1;var n=null==a?0:toInteger(a);return n<0&&(n=nativeMax(r+n,0)),baseFindIndex(e,baseIteratee$6(t,3),n)}var isArray=Array.isArray,isArray_1=isArray,_arrayReduce=arrayReduce$1,_createBaseFor=createBaseFor$1,createBaseFor=_createBaseFor,baseFor$1=createBaseFor(),_baseFor=baseFor$1,_baseTimes=baseTimes$1,commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},freeGlobal$1="object"==typeof commonjsGlobal&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal,_freeGlobal=freeGlobal$1,freeGlobal=_freeGlobal,freeSelf="object"==typeof self&&self&&self.Object===Object&&self,root$1=freeGlobal||freeSelf||Function("return this")(),_root=root$1,root=_root,Symbol$2=root.Symbol,_Symbol=Symbol$2,Symbol$3=_Symbol,objectProto$2=Object.prototype,hasOwnProperty$2=objectProto$2.hasOwnProperty,nativeObjectToString=objectProto$2.toString,symToStringTag$1=Symbol$3?Symbol$3.toStringTag:void 0,_getRawTag=getRawTag$1,objectProto$3=Object.prototype,nativeObjectToString$1=objectProto$3.toString,_objectToString=objectToString$1,Symbol$1=_Symbol,getRawTag=_getRawTag,objectToString=_objectToString,nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag=Symbol$1?Symbol$1.toStringTag:void 0,_baseGetTag=baseGetTag$1,isObjectLike_1=isObjectLike$2,baseGetTag=_baseGetTag,isObjectLike$1=isObjectLike_1,argsTag="[object Arguments]",_baseIsArguments=baseIsArguments$1,baseIsArguments=_baseIsArguments,isObjectLike=isObjectLike_1,objectProto$1=Object.prototype,hasOwnProperty$1=objectProto$1.hasOwnProperty,propertyIsEnumerable=objectProto$1.propertyIsEnumerable,isArguments$1=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$1.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArguments_1=isArguments$1,stubFalse_1=stubFalse,isBuffer_1=createCommonjsModule(function(e,t){var a=_root,r=stubFalse_1,n="object"==typeof t&&t&&!t.nodeType&&t,s=n&&"object"==typeof e&&e&&!e.nodeType&&e,o=s&&s.exports===n,i=o?a.Buffer:void 0,c=i?i.isBuffer:void 0,u=c||r;e.exports=u}),MAX_SAFE_INTEGER=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/,_isIndex=isIndex$1,MAX_SAFE_INTEGER$1=9007199254740991,isLength_1=isLength$1,baseGetTag$2=_baseGetTag,isLength=isLength_1,isObjectLike$3=isObjectLike_1,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var _baseIsTypedArray=baseIsTypedArray$1,_baseUnary=baseUnary$1,_nodeUtil=createCommonjsModule(function(e,t){var a=_freeGlobal,r="object"==typeof t&&t&&!t.nodeType&&t,n=r&&"object"==typeof e&&e&&!e.nodeType&&e,s=n&&n.exports===r,o=s&&a.process,i=function(){try{return o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=i}),baseIsTypedArray=_baseIsTypedArray,baseUnary=_baseUnary,nodeUtil=_nodeUtil,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray,isTypedArray$1=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray,isTypedArray_1=isTypedArray$1,baseTimes=_baseTimes,isArguments=isArguments_1,isArray$2=isArray_1,isBuffer=isBuffer_1,isIndex=_isIndex,isTypedArray=isTypedArray_1,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,_arrayLikeKeys=arrayLikeKeys$1,objectProto$5=Object.prototype,_isPrototype=isPrototype$1,_overArg=overArg$1,overArg=_overArg,nativeKeys$1=overArg(Object.keys,Object),_nativeKeys=nativeKeys$1,isPrototype=_isPrototype,nativeKeys=_nativeKeys,objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,_baseKeys=baseKeys$1,isObject_1=isObject$1,baseGetTag$3=_baseGetTag,isObject=isObject_1,asyncTag="[object AsyncFunction]",funcTag$1="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]",isFunction_1=isFunction$1,isFunction=isFunction_1,isLength$2=isLength_1,isArrayLike_1=isArrayLike$1,arrayLikeKeys=_arrayLikeKeys,baseKeys=_baseKeys,isArrayLike=isArrayLike_1,keys_1=keys$1,baseFor=_baseFor,keys=keys_1,_baseForOwn=baseForOwn$1,isArrayLike$2=isArrayLike_1,_createBaseEach=createBaseEach$1,baseForOwn=_baseForOwn,createBaseEach=_createBaseEach,baseEach$1=createBaseEach(baseForOwn),_baseEach=baseEach$1,_listCacheClear=listCacheClear$1,eq_1=eq$1,eq=eq_1,_assocIndexOf=assocIndexOf$1,assocIndexOf=_assocIndexOf,arrayProto=Array.prototype,splice=arrayProto.splice,_listCacheDelete=listCacheDelete$1,assocIndexOf$2=_assocIndexOf,_listCacheGet=listCacheGet$1,assocIndexOf$3=_assocIndexOf,_listCacheHas=listCacheHas$1,assocIndexOf$4=_assocIndexOf,_listCacheSet=listCacheSet$1,listCacheClear=_listCacheClear,listCacheDelete=_listCacheDelete,listCacheGet=_listCacheGet,listCacheHas=_listCacheHas,listCacheSet=_listCacheSet;ListCache$1.prototype.clear=listCacheClear,ListCache$1.prototype.delete=listCacheDelete,ListCache$1.prototype.get=listCacheGet,ListCache$1.prototype.has=listCacheHas,ListCache$1.prototype.set=listCacheSet;var _ListCache=ListCache$1,ListCache$2=_ListCache,_stackClear=stackClear$1,_stackDelete=stackDelete$1,_stackGet=stackGet$1,_stackHas=stackHas$1,root$3=_root,coreJsData$1=root$3["__core-js_shared__"],_coreJsData=coreJsData$1,coreJsData=_coreJsData,maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),_isMasked=isMasked$1,funcProto$1=Function.prototype,funcToString$1=funcProto$1.toString,_toSource=toSource$1,isFunction$2=isFunction_1,isMasked=_isMasked,isObject$2=isObject_1,toSource=_toSource,reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto=Function.prototype,objectProto$6=Object.prototype,funcToString=funcProto.toString,hasOwnProperty$4=objectProto$6.hasOwnProperty,reIsNative=RegExp("^"+funcToString.call(hasOwnProperty$4).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_baseIsNative=baseIsNative$1,_getValue=getValue$1,baseIsNative=_baseIsNative,getValue=_getValue,_getNative=getNative$1,getNative=_getNative,root$2=_root,Map$1=getNative(root$2,"Map"),_Map=Map$1,getNative$2=_getNative,nativeCreate$1=getNative$2(Object,"create"),_nativeCreate=nativeCreate$1,nativeCreate=_nativeCreate,_hashClear=hashClear$1,_hashDelete=hashDelete$1,nativeCreate$2=_nativeCreate,HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$7=Object.prototype,hasOwnProperty$5=objectProto$7.hasOwnProperty,_hashGet=hashGet$1,nativeCreate$3=_nativeCreate,objectProto$8=Object.prototype,hasOwnProperty$6=objectProto$8.hasOwnProperty,_hashHas=hashHas$1,nativeCreate$4=_nativeCreate,HASH_UNDEFINED$1="__lodash_hash_undefined__",_hashSet=hashSet$1,hashClear=_hashClear,hashDelete=_hashDelete,hashGet=_hashGet,hashHas=_hashHas,hashSet=_hashSet;Hash$1.prototype.clear=hashClear,Hash$1.prototype.delete=hashDelete,Hash$1.prototype.get=hashGet,Hash$1.prototype.has=hashHas,Hash$1.prototype.set=hashSet;var _Hash=Hash$1,Hash=_Hash,ListCache$4=_ListCache,Map$2=_Map,_mapCacheClear=mapCacheClear$1,_isKeyable=isKeyable$1,isKeyable=_isKeyable,_getMapData=getMapData$1,getMapData=_getMapData,_mapCacheDelete=mapCacheDelete$1,getMapData$2=_getMapData,_mapCacheGet=mapCacheGet$1,getMapData$3=_getMapData,_mapCacheHas=mapCacheHas$1,getMapData$4=_getMapData,_mapCacheSet=mapCacheSet$1,mapCacheClear=_mapCacheClear,mapCacheDelete=_mapCacheDelete,mapCacheGet=_mapCacheGet,mapCacheHas=_mapCacheHas,mapCacheSet=_mapCacheSet;MapCache$1.prototype.clear=mapCacheClear,MapCache$1.prototype.delete=mapCacheDelete,MapCache$1.prototype.get=mapCacheGet,MapCache$1.prototype.has=mapCacheHas,MapCache$1.prototype.set=mapCacheSet;var _MapCache=MapCache$1,ListCache$3=_ListCache,Map=_Map,MapCache=_MapCache,LARGE_ARRAY_SIZE=200,_stackSet=stackSet$1,ListCache=_ListCache,stackClear=_stackClear,stackDelete=_stackDelete,stackGet=_stackGet,stackHas=_stackHas,stackSet=_stackSet;Stack$1.prototype.clear=stackClear,Stack$1.prototype.delete=stackDelete,Stack$1.prototype.get=stackGet,Stack$1.prototype.has=stackHas,Stack$1.prototype.set=stackSet;var _Stack=Stack$1,HASH_UNDEFINED$2="__lodash_hash_undefined__",_setCacheAdd=setCacheAdd$1,_setCacheHas=setCacheHas$1,MapCache$2=_MapCache,setCacheAdd=_setCacheAdd,setCacheHas=_setCacheHas;SetCache$1.prototype.add=SetCache$1.prototype.push=setCacheAdd,SetCache$1.prototype.has=setCacheHas;var _SetCache=SetCache$1,_arraySome=arraySome$1,_cacheHas=cacheHas$1,SetCache=_SetCache,arraySome=_arraySome,cacheHas=_cacheHas,COMPARE_PARTIAL_FLAG$2=1,COMPARE_UNORDERED_FLAG$1=2,_equalArrays=equalArrays$1,root$4=_root,Uint8Array$1=root$4.Uint8Array,_Uint8Array=Uint8Array$1,_mapToArray=mapToArray$1,_setToArray=setToArray$1,Symbol$4=_Symbol,Uint8Array=_Uint8Array,eq$2=eq_1,equalArrays$2=_equalArrays,mapToArray=_mapToArray,setToArray=_setToArray,COMPARE_PARTIAL_FLAG$3=1,COMPARE_UNORDERED_FLAG$2=2,boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$1="[object Error]",mapTag$1="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",symbolTag="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",symbolProto=Symbol$4?Symbol$4.prototype:void 0,symbolValueOf=symbolProto?symbolProto.valueOf:void 0,_equalByTag=equalByTag$1,keys$2=keys_1,COMPARE_PARTIAL_FLAG$4=1,objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty,_equalObjects=equalObjects$1,getNative$3=_getNative,root$5=_root,DataView$1=getNative$3(root$5,"DataView"),_DataView=DataView$1,getNative$4=_getNative,root$6=_root,Promise$2=getNative$4(root$6,"Promise"),_Promise=Promise$2,getNative$5=_getNative,root$7=_root,Set$1=getNative$5(root$7,"Set"),_Set=Set$1,getNative$6=_getNative,root$8=_root,WeakMap$1=getNative$6(root$8,"WeakMap"),_WeakMap=WeakMap$1,DataView=_DataView,Map$3=_Map,Promise$1=_Promise,Set=_Set,WeakMap=_WeakMap,baseGetTag$4=_baseGetTag,toSource$2=_toSource,mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=toSource$2(DataView),mapCtorString=toSource$2(Map$3),promiseCtorString=toSource$2(Promise$1),setCtorString=toSource$2(Set),weakMapCtorString=toSource$2(WeakMap),getTag$1=baseGetTag$4;(DataView&&getTag$1(new DataView(new ArrayBuffer(1)))!=dataViewTag$2||Map$3&&getTag$1(new Map$3)!=mapTag$2||Promise$1&&getTag$1(Promise$1.resolve())!=promiseTag||Set&&getTag$1(new Set)!=setTag$2||WeakMap&&getTag$1(new WeakMap)!=weakMapTag$1)&&(getTag$1=function(e){var t=baseGetTag$4(e),a=t==objectTag$2?e.constructor:void 0,r=a?toSource$2(a):"";if(r)switch(r){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$1}return t});var _getTag=getTag$1,Stack$2=_Stack,equalArrays=_equalArrays,equalByTag=_equalByTag,equalObjects=_equalObjects,getTag=_getTag,isArray$4=isArray_1,isBuffer$1=isBuffer_1,isTypedArray$2=isTypedArray_1,COMPARE_PARTIAL_FLAG$1=1,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",objectTag$1="[object Object]",objectProto$9=Object.prototype,hasOwnProperty$7=objectProto$9.hasOwnProperty,_baseIsEqualDeep=baseIsEqualDeep$1,baseIsEqualDeep=_baseIsEqualDeep,isObject$3=isObject_1,isObjectLike$4=isObjectLike_1,_baseIsEqual=baseIsEqual$1,Stack=_Stack,baseIsEqual=_baseIsEqual,COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2,_baseIsMatch=baseIsMatch$1,isObject$4=isObject_1,_isStrictComparable=isStrictComparable$1,isStrictComparable=_isStrictComparable,keys$3=keys_1,_getMatchData=getMatchData$1,_matchesStrictComparable=matchesStrictComparable$1,baseIsMatch=_baseIsMatch,getMatchData=_getMatchData,matchesStrictComparable=_matchesStrictComparable,_baseMatches=baseMatches$1,baseGetTag$5=_baseGetTag,isObjectLike$5=isObjectLike_1,symbolTag$1="[object Symbol]",isSymbol_1=isSymbol$1,isArray$6=isArray_1,isSymbol=isSymbol_1,reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,_isKey=isKey$2,MapCache$3=_MapCache,FUNC_ERROR_TEXT="Expected a function";memoize$1.Cache=MapCache$3;var memoize_1=memoize$1,memoize=memoize_1,MAX_MEMOIZE_SIZE=500,_memoizeCapped=memoizeCapped$1,memoizeCapped=_memoizeCapped,reLeadingDot=/^\./,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath$1=memoizeCapped(function(e){var t=[];return reLeadingDot.test(e)&&t.push(""),e.replace(rePropName,function(e,a,r,n){t.push(r?n.replace(reEscapeChar,"$1"):a||e)}),t}),_stringToPath=stringToPath$1,_arrayMap=arrayMap$1,Symbol$5=_Symbol,arrayMap=_arrayMap,isArray$7=isArray_1,isSymbol$2=isSymbol_1,INFINITY=1/0,symbolProto$1=Symbol$5?Symbol$5.prototype:void 0,symbolToString=symbolProto$1?symbolProto$1.toString:void 0,_baseToString=baseToString$1,baseToString=_baseToString,toString_1=toString$1,isArray$5=isArray_1,isKey$1=_isKey,stringToPath=_stringToPath,toString=toString_1,_castPath=castPath$1,isSymbol$3=isSymbol_1,INFINITY$1=1/0,_toKey=toKey$2,castPath=_castPath,toKey$1=_toKey,_baseGet=baseGet$1,baseGet=_baseGet,get_1=get$1,_baseHasIn=baseHasIn$1,castPath$2=_castPath,isArguments$2=isArguments_1,isArray$8=isArray_1,isIndex$2=_isIndex,isLength$3=isLength_1,toKey$3=_toKey,_hasPath=hasPath$1,baseHasIn=_baseHasIn,hasPath=_hasPath,hasIn_1=hasIn$1,baseIsEqual$2=_baseIsEqual,get=get_1,hasIn=hasIn_1,isKey=_isKey,isStrictComparable$2=_isStrictComparable,matchesStrictComparable$2=_matchesStrictComparable,toKey=_toKey,COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2,_baseMatchesProperty=baseMatchesProperty$1,identity_1=identity$1,_baseProperty=baseProperty$1,baseGet$2=_baseGet,_basePropertyDeep=basePropertyDeep$1,baseProperty=_baseProperty,basePropertyDeep=_basePropertyDeep,isKey$3=_isKey,toKey$4=_toKey,property_1=property$1,baseMatches=_baseMatches,baseMatchesProperty=_baseMatchesProperty,identity=identity_1,isArray$3=isArray_1,property=property_1,_baseIteratee=baseIteratee$1,_baseReduce=baseReduce$1,arrayReduce=_arrayReduce,baseEach=_baseEach,baseIteratee=_baseIteratee,baseReduce=_baseReduce,isArray$1=isArray_1,reduce_1=reduce,baseEach$2=_baseEach,isArrayLike$3=isArrayLike_1,_baseMap=baseMap$1,arrayMap$2=_arrayMap,baseIteratee$2=_baseIteratee,baseMap=_baseMap,isArray$9=isArray_1,map_1=map,classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),get$2=function e(t,a,r){null===t&&(t=Function.prototype);var n=Object.getOwnPropertyDescriptor(t,a);if(void 0===n){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,a,r)}if("value"in n)return n.value;var o=n.get;if(void 0!==o)return o.call(r)},inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},possibleConstructorReturn=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},set=function e(t,a,r,n){var s=Object.getOwnPropertyDescriptor(t,a);if(void 0===s){var o=Object.getPrototypeOf(t);null!==o&&e(o,a,r,n)}else if("value"in s&&s.writable)s.value=r;else{var i=s.set;void 0!==i&&i.call(n,r)}return r},BaseHelper=function(){function e(){classCallCheck(this,e)}return createClass(e,[{key:"underscorifyKeys",value:function(){var e=function(e){return e.replace(/([A-Z])/g,function(e){return"_"+e.toLowerCase()})},t=reduce_1(this,function(t,a,r){return t[e(r)]=isArray_1(a)?map_1(a,function(e){
return e.underscorifyKeys()}):a,t},{});return t}}]),e}(),SecurityProfile=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(e){return e.replace(/(\_\w)/g,function(e){return e[1].toUpperCase()})};return map_1(e,function(e,t){return a[r(t)]=e}),Object.seal(a),a}return inherits(t,e),t}(BaseHelper),ExtensionFilter=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(t){return e&&t in e?e[t]:null};return a.mode=r("mode"),a.list=r("list"),Object.seal(a),a}return inherits(t,e),t}(BaseHelper),EnterpriseSettings=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(e){return e.replace(/(\_\w)/g,function(e){return e[1].toUpperCase()})};return map_1(e,function(e,t){return a[r(t)]=e}),a.extensionFilter=new ExtensionFilter(a.extensionFilter),Object.seal(a),a}return inherits(t,e),t}(BaseHelper),ContactMethod=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(t){return e&&t in e?e[t]:null};return a.destinationType=r("destinationType"),a.destination=r("destination"),a}return inherits(t,e),t}(BaseHelper),_arrayEvery=arrayEvery$1,baseEach$3=_baseEach,_baseEvery=baseEvery$1,eq$3=eq_1,isArrayLike$4=isArrayLike_1,isIndex$3=_isIndex,isObject$5=isObject_1,_isIterateeCall=isIterateeCall$1,arrayEvery=_arrayEvery,baseEvery=_baseEvery,baseIteratee$3=_baseIteratee,isArray$10=isArray_1,isIterateeCall=_isIterateeCall,every_1=every,fetch=null,fs=null,path=null,lookup=null,isNode=!1,FormData=null;"undefined"!=typeof process&&"node"===process.release.name?(fetch=require("node-fetch"),fs=require("fs"),path=require("path"),lookup=require("mime-types").lookup,FormData=require("form-data"),isNode=!0):(fetch=window.fetch,FormData=window.FormData);var Attachment=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return isNode?"string"==typeof e?(a.filename=path.basename(e),a.contentType=lookup(e),a.stream=fs.readFileSync(e)):every_1(["filename","stream","contentType"],function(t){return t in e})&&(a.filename=e.filename,a.contentType=e.contentType,a.stream=e.stream):a.file=e,a.guid=null,Object.seal(a),a}return inherits(t,e),t}(BaseHelper),Safebox=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return map_1(["guid","recipients","subject","attachments","securityProfile","message","replyEnabled","uploadUrl","publicEncryptionKey","notificationLanguage"],function(e){return a[e]=null}),a.userEmail=e,Object.preventExtensions(a),a}return inherits(t,e),createClass(t,[{key:"toJson",value:function(){var e=this.securityProfile,t=this.attachments;delete this.securityProfile,delete this.attachments;var a=this.underscorifyKeys();return a.security_profile_id=e.id,a.document_ids=reduce_1(t,function(e,t){return e.push(t.guid),e},[]),a.group_replies=e.groupReplies.value,a.expiration_value=e.expirationValue.value,a.expiration_unit=e.expirationUnit.value,a.retention_period_type=e.retentionPeriodType.value,a.retention_period_value=e.retentionPeriodValue.value,a.retention_period_unit=e.retentionPeriodUnit.value,a.encrypt_message=e.encryptMessage.value,a.double_encryption=e.doubleEncryption.value,a.reply_enabled=e.replyEnabled.value,a.notification_language="en",JSON.stringify({safebox:a})}}]),t}(BaseHelper),Recipient=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(t){return e&&t in e?e[t]:null};return a.email=r("email"),a.firstName=r("first_name"),a.lastName=r("last_name"),a.companyName=r("company_name"),a.contactMethods=null,e&&"contact_methods"in e&&(a.contactMethods=e.contact_methods.map(function(e){new ContactMethod(e)})),Object.seal(a),a}return inherits(t,e),t}(BaseHelper),SafeboxResponse=function(e){function t(e){classCallCheck(this,t);var a=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=function(t){return e&&t in e?e[t]:null};return a.previewUrl=r("preview_url"),a.encryptionKey=r("encryptionKey"),a.guid=r("guid"),Object.seal(a),a}return inherits(t,e),t}(BaseHelper),Helpers={};Helpers.SecurityProfile=SecurityProfile,Helpers.EnterpriseSettings=EnterpriseSettings,Helpers.ExtensionFilter=ExtensionFilter,Helpers.ContactMethod=ContactMethod,Helpers.Attachment=Attachment,Helpers.Recipient=Recipient,Helpers.Safebox=Safebox,Helpers.SafeboxResponse=SafeboxResponse;var baseEach$4=_baseEach,_baseSome=baseSome$1,arraySome$2=_arraySome,baseIteratee$4=_baseIteratee,baseSome=_baseSome,isArray$11=isArray_1,isIterateeCall$2=_isIterateeCall,some_1=some,SendSecureException=function(e){function t(e,a,r){classCallCheck(this,t);var n=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.code=e,n.message=a,n.responseContent=r,n}return inherits(t,e),t}(Error),UnexpectedServerResponseException=function(e){function t(e,a){return classCallCheck(this,t),possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,a))}return inherits(t,e),t}(SendSecureException),JsonClient=function(){function e(t,a){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";classCallCheck(this,e),this.apiToken=t,this.endpoint=r,this.locale=n,this.enterpriseAccount=a}return createClass(e,[{key:"_getSendSecureEndpoint",value:function(e,t){var a=t+"/services/"+e+"/sendsecure/server/url";return fetch(a,{method:"get"}).then(function(e){if(e.ok){var t=e.text();if(""===t)throw new UnexpectedServerResponseException(1,"unexpected server response format");return t}throw new SendSecureException(e.status,e.statusText)})}},{key:"_makeRequest",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{headers:{"Authorization-Token":this.apiToken},method:"get"};return this._getSendSecureEndpoint(this.enterpriseAccount,this.endpoint).then(function(a){var r=""+a+e;return fetch(r,t)}).then(function(e){return e.ok?e.json():e.text().then(function(t){throw new SendSecureException(e.status,e.statusText,t)})})}},{key:"newSafebox",value:function(e){var t="api/v2/safeboxes/new?user_email="+e+"&locale="+this.locale;return this._makeRequest(t)}},{key:"securityProfiles",value:function(e){var t="api/v2/enterprises/"+this.enterpriseAccount+"/security_profiles?user_email="+e+"&locale="+this.locale;return this._makeRequest(t)}},{key:"enterpriseSettings",value:function(){var e="api/v2/enterprises/"+this.enterpriseAccount+"/settings?locale="+this.locale;return this._makeRequest(e)}},{key:"uploadFile",value:function(e,t){if(!some_1(["file","filePath","fileStream"],function(e){return e in t}))throw new SendSecureException("0","upload File arguments error");if(!isNode){if("file"in t&&t.file instanceof File)return this._uploadFileBrowser(e,t.file);throw new SendSecureException("0",'"file" argument should be an instance of File')}if("filePath"in t){if(fs.existsSync(t.filePath)){var a=fs.readFileSync(t.filePath),r=t.contentType||lookup(t.filePath),n=t.filename||path.basename(t.filePath);return this._uploadFileNode(e,a,r,n)}throw new SendSecureException("0",t.filePath+" does not exist")}if(every_1(["fileStream","contentType","filename"],function(e){return e in t}))return this._uploadFileNode(e,t.fileStream,t.contentType,t.filename)}},{key:"_uploadFileBrowser",value:function(e,t){var a=new FormData;return a.append("file",t,t.name),fetch(e,{method:"post",body:a}).then(function(e){if(e.ok)return e.json();throw new SendSecureException(e.status,e.statusText)})}},{key:"_uploadFileNode",value:function(e,t,a,r){var n=new FormData;return n.append("file",t,r),fetch(e,{method:"post",body:n}).then(function(e){if(e.ok)return e.json();throw new SendSecureException(e.status,e.statusText)})}},{key:"commitSafebox",value:function(e){var t="api/v2/safeboxes?locale="+this.locale;return this._makeRequest(t,{headers:{"Authorization-Token":this.apiToken,"Content-Type":"application/json"},method:"post",body:e})}}]),e}(),baseIteratee$5=_baseIteratee,isArrayLike$5=isArrayLike_1,keys$4=keys_1,_createFind=createFind$1,_baseFindIndex=baseFindIndex$1,isObject$6=isObject_1,isSymbol$4=isSymbol_1,NAN=NaN,reTrim=/^\s+|\s+$/g,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsOctal=/^0o[0-7]+$/i,freeParseInt=parseInt,toNumber_1=toNumber$1,toNumber=toNumber_1,INFINITY$2=1/0,MAX_INTEGER=1.7976931348623157e308,toFinite_1=toFinite$1,toFinite=toFinite_1,toInteger_1=toInteger$1,baseFindIndex=_baseFindIndex,baseIteratee$6=_baseIteratee,toInteger=toInteger_1,nativeMax=Math.max,findIndex_1=findIndex$1,createFind=_createFind,findIndex=findIndex_1,find=createFind(findIndex),find_1=find,Client=function(){function e(t,a){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";classCallCheck(this,e),this.apiToken=t,this.enterpriseAccount=a,this.endpoint=r,this.locale=n,this.jsonClient=new JsonClient(t,a,r,n)}return createClass(e,[{key:"submitSafebox",value:function(e){var t=this;return this.initializeSafebox(e).then(function(e){var a=map_1(e.attachments,function(a){return t.uploadAttachment(e,a)});return Promise.all(a).then(function(t){return e.attachments=t,e})}).then(function(e){return e.securityProfile?t.commitSafebox(e):t.defaultSecurityProfile(e.userEmail).then(function(a){return e.securityProfile=a,t.commitSafebox(e)})}).catch(function(e){throw e})}},{key:"initializeSafebox",value:function(e){return this.jsonClient.newSafebox(e.userEmail).then(function(t){return e.guid=t.guid,e.publicEncryptionKey=t.public_encryption_key,e.uploadUrl=t.upload_url,e}).catch(function(e){throw e})}},{key:"defaultSecurityProfile",value:function(e){var t=this;return this.securityProfiles(e).then(function(a){return t.enterpriseSettings(e).then(function(e){return find_1(a,function(t){return t.id==e.defaultSecurityProfileId})})}).catch(function(e){throw e})}},{key:"uploadAttachment",value:function(e,t){return isNode?this.jsonClient.uploadFile(e.uploadUrl,{fileStream:t.stream,contentType:t.contentType,filename:t.filename}).then(function(e){return t.guid=e.temporary_document.document_guid,t}):this.jsonClient.uploadFile(e.uploadUrl,{file:t.file}).then(function(e){return t.guid=e.temporary_document.document_guid,t})}},{key:"commitSafebox",value:function(e){return this.jsonClient.commitSafebox(e.toJson()).then(function(e){return new Helpers.SafeboxResponse(e)}).catch(function(e){throw e})}},{key:"securityProfiles",value:function(e){return this.jsonClient.securityProfiles(e).then(function(e){return e.security_profiles.map(function(e){return new Helpers.SecurityProfile(e)})})}},{key:"enterpriseSettings",value:function(){return this.jsonClient.enterpriseSettings().then(function(e){return new Helpers.EnterpriseSettings(e)})}}],[{key:"getUserToken",value:function(e,t,a,r,n){var s=(arguments.length>5&&void 0!==arguments[5]?arguments[5]:"sendsecure-js",arguments[6]),o=arguments[7],i=s+"/services/"+e+"/portal/host";return fetch(i,{method:"get"}).then(function(e){if(e.ok){var t=e.text();if(""===t)throw new UnexpectedServerResponseException(1,"unexpected server response format");return t}throw new SendSecureException(e.status,e.statusText)}).then(function(s){var i=s+"api/user_token",c=new FormData;return c.append("permalink",e),c.append("username",t),c.append("password",a),o&&c.append("otp",o),c.append("application_type","sendsecure-js"),c.append("device_id",r),c.append("device_name",n),fetch(i,{method:"POST",body:c}).then(function(e){var t=e.json();if(!t)throw new SendSecureException(e.status,e.statusText);return t}).then(function(e){if(e.result)return e.token;throw new SendSecureException(e.code,e.message)})}).catch(function(e){if(e instanceof SendSecureException)throw e;throw new SendSecureException(e.code,e.message)})}}]),e}(),SendSecure={};SendSecure.JsonClient=JsonClient,SendSecure.Client=Client,SendSecure.Helpers=Helpers,module.exports=SendSecure;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
