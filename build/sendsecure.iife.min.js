var SendSecure=function(){"use strict";function t(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function e(t){return function(e,n,r){for(var o=-1,i=Object(e),u=r(e),a=u.length;a--;){var c=u[t?a:++o];if(n(i[c],c,i)===!1)break}return e}}function n(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function r(t,e){return e={exports:{}},t(e,e.exports),e.exports}function o(t){var e=we.call(t,Se),n=t[Se];try{t[Se]=void 0;var r=!0}catch(t){}var o=Oe.call(t);return r&&(e?t[Se]=n:delete t[Se]),o}function i(t){return Pe.call(t)}function u(t){return null==t?void 0===t?Ce:Fe:(t=Object(t),Ue&&Ue in t?ze(t):Ee(t))}function a(t){return null!=t&&"object"==typeof t}function c(t){return Ne(t)&&Me(t)==qe}function s(){return!1}function f(t,e){return e=null==e?Ze:e,!!e&&("number"==typeof t||Qe.test(t))&&t>-1&&t%1==0&&t<e}function l(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Ye}function p(t){return rn(t)&&nn(t.length)&&!!Tn[en(t)]}function h(t){return function(e){return t(e)}}function y(t,e){var n=Dn(t),r=!n&&Bn(t),o=!n&&!r&&In(t),i=!n&&!r&&!o&&Ln(t),u=n||r||o||i,a=u?qn(t.length,String):[],c=a.length;for(var s in t)!e&&!Jn.call(t,s)||u&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Kn(s,c))||a.push(s);return a}function v(t){var e=t&&t.constructor,n="function"==typeof e&&e.prototype||Gn;return t===n}function d(t,e){return function(n){return t(e(n))}}function _(t){if(!tr(t))return er(t);var e=[];for(var n in Object(t))rr.call(t,n)&&"constructor"!=n&&e.push(n);return e}function b(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function g(t){if(!ar(t))return!1;var e=ur(t);return e==sr||e==fr||e==cr||e==lr}function m(t){return null!=t&&yr(t.length)&&!hr(t)}function j(t){return br(t)?dr(t):_r(t)}function w(t,e){return t&&mr(t,e,jr)}function O(t,e){return function(n,r){if(null==n)return n;if(!Or(n))return t(n,r);for(var o=n.length,i=e?o:-1,u=Object(n);(e?i--:++i<o)&&r(u[i],i,u)!==!1;);return n}}function S(){this.__data__=[],this.size=0}function x(t,e){return t===e||t!==t&&e!==e}function k(t,e){for(var n=t.length;n--;)if(Er(t[n][0],e))return n;return-1}function P(t){var e=this.__data__,n=Cr(e,t);if(n<0)return!1;var r=e.length-1;return n==r?e.pop():Rr.call(e,n,1),--this.size,!0}function A(t){var e=this.__data__,n=Mr(e,t);return n<0?void 0:e[n][1]}function T(t){return qr(this.__data__,t)>-1}function z(t,e){var n=this.__data__,r=Dr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}function E(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function F(){this.__data__=new Hr,this.size=0}function C(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}function U(t){return this.__data__.get(t)}function R(t){return this.__data__.has(t)}function $(t){return!!oo&&oo in t}function M(t){if(null!=t){try{return ao.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function N(t){if(!lo(t)||fo(t))return!1;var e=so(t)?mo:yo;return e.test(po(t))}function q(t,e){return null==t?void 0:t[e]}function B(t,e){var n=So(t,e);return Oo(n)?n:void 0}function D(){this.__data__=Co?Co(null):{},this.size=0}function I(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}function K(t){var e=this.__data__;if($o){var n=e[t];return n===Mo?void 0:n}return qo.call(e,t)?e[t]:void 0}function L(t){var e=this.__data__;return Do?void 0!==e[t]:Ko.call(e,t)}function V(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Vo&&void 0===e?Jo:e,this}function J(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function W(){this.size=0,this.__data__={hash:new ti,map:new(ni||ei),string:new ti}}function G(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function H(t,e){var n=t.__data__;return ii(e)?n["string"==typeof e?"string":"hash"]:n.map}function Z(t){var e=ai(this,t).delete(t);return this.size-=e?1:0,e}function Q(t){return si(this,t).get(t)}function X(t){return li(this,t).has(t)}function Y(t,e){var n=hi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}function tt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function et(t,e){var n=this.__data__;if(n instanceof ji){var r=n.__data__;if(!wi||r.length<Si-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Oi(r)}return n.set(t,e),this.size=n.size,this}function nt(t){var e=this.__data__=new ki(t);this.size=e.size}function rt(t){return this.__data__.set(t,Ci),this}function ot(t){return this.__data__.has(t)}function it(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new $i;++e<n;)this.add(t[e])}function ut(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function at(t,e){return t.has(e)}function ct(t,e,n,r,o,i){var u=n&Vi,a=t.length,c=e.length;if(a!=c&&!(u&&c>a))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var f=-1,l=!0,p=n&Ji?new Ii:void 0;for(i.set(t,e),i.set(e,t);++f<a;){var h=t[f],y=e[f];if(r)var v=u?r(y,h,f,e,t,i):r(h,y,f,t,e,i);if(void 0!==v){if(v)continue;l=!1;break}if(p){if(!Ki(e,function(t,e){if(!Li(p,e)&&(h===t||o(h,t,n,r,i)))return p.push(e)})){l=!1;break}}else if(h!==y&&!o(h,y,n,r,i)){l=!1;break}}return i.delete(t),i.delete(e),l}function st(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function ft(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function lt(t,e,n,r,o,i,u){switch(n){case _u:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case du:return!(t.byteLength!=e.byteLength||!i(new tu(t),new tu(e)));case au:case cu:case lu:return eu(+t,+e);case su:return t.name==e.name&&t.message==e.message;case pu:case yu:return t==e+"";case fu:var a=ru;case hu:var c=r&iu;if(a||(a=ou),t.size!=e.size&&!c)return!1;var s=u.get(t);if(s)return s==e;r|=uu,u.set(t,e);var f=nu(a(t),a(e),r,o,i,u);return u.delete(t),f;case vu:if(gu)return gu.call(t)==gu.call(e)}return!1}function pt(t,e,n,r,o,i){var u=n&wu,a=ju(t),c=a.length,s=ju(e),f=s.length;if(c!=f&&!u)return!1;for(var l=c;l--;){var p=a[l];if(!(u?p in e:Su.call(e,p)))return!1}var h=i.get(t);if(h&&i.get(e))return h==e;var y=!0;i.set(t,e),i.set(e,t);for(var v=u;++l<c;){p=a[l];var d=t[p],_=e[p];if(r)var b=u?r(_,d,p,e,t,i):r(d,_,p,t,e,i);if(!(void 0===b?d===_||o(d,_,n,r,i):b)){y=!1;break}v||(v="constructor"==p)}if(y&&!v){var g=t.constructor,m=e.constructor;g!=m&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof m&&m instanceof m)&&(y=!1)}return i.delete(t),i.delete(e),y}function ht(t,e,n,r,o,i){var u=ha(t),a=ha(e),c=ba,s=ba;u||(c=pa(t),c=c==_a?ga:c),a||(s=pa(e),s=s==_a?ga:s);var f=c==ga,l=s==ga,p=c==s;if(p&&ya(t)){if(!ya(e))return!1;u=!0,f=!1}if(p&&!f)return i||(i=new ca),u||va(t)?sa(t,e,n,r,o,i):fa(t,e,c,n,r,o,i);if(!(n&da)){var h=f&&ja.call(t,"__wrapped__"),y=l&&ja.call(e,"__wrapped__");if(h||y){var v=h?t.value():t,d=y?e.value():e;return i||(i=new ca),o(v,d,n,r,i)}}return!!p&&(i||(i=new ca),la(t,e,n,r,o,i))}function yt(t,e,n,r,o){return t===e||(null==t||null==e||!Sa(t)&&!xa(e)?t!==t&&e!==e:Oa(t,e,n,r,yt,o))}function vt(t,e,n,r){var o=n.length,i=o,u=!r;if(null==t)return!i;for(t=Object(t);o--;){var a=n[o];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++o<i;){a=n[o];var c=a[0],s=t[c],f=a[1];if(u&&a[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Pa;if(r)var p=r(s,f,c,t,e,l);if(!(void 0===p?Aa(f,s,Ta|za,r,l):p))return!1}}return!0}function dt(t){return t===t&&!Fa(t)}function _t(t){for(var e=Ra(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Ua(o)]}return e}function bt(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}function gt(t){var e=qa(t);return 1==e.length&&e[0][2]?Ba(e[0][0],e[0][1]):function(n){return n===t||Na(n,t,e)}}function mt(t){return"symbol"==typeof t||Ka(t)&&Ia(t)==La}function jt(t,e){if(Ja(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Wa(t))||(Ha.test(t)||!Ga.test(t)||null!=e&&t in Object(e))}function wt(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(Xa);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=t.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(wt.Cache||Qa),n}function Ot(t){var e=tc(t,function(t){return n.size===ec&&n.clear(),t}),n=e.cache;return e}function St(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function xt(t){if("string"==typeof t)return t;if(pc(t))return lc(t,xt)+"";if(hc(t))return dc?dc.call(t):"";var e=t+"";return"0"==e&&1/t==-yc?"-0":e}function kt(t){return null==t?"":bc(t)}function Pt(t,e){return mc(t)?t:jc(t,e)?[t]:wc(Oc(t))}function At(t){if("string"==typeof t||xc(t))return t;var e=t+"";return"0"==e&&1/t==-kc?"-0":e}function Tt(t,e){e=Ac(e,t);for(var n=0,r=e.length;null!=t&&n<r;)t=t[Tc(e[n++])];return n&&n==r?t:void 0}function zt(t,e,n){var r=null==t?void 0:Ec(t,e);return void 0===r?n:r}function Et(t,e){return null!=t&&e in Object(t)}function Ft(t,e,n){e=Uc(e,t);for(var r=-1,o=e.length,i=!1;++r<o;){var u=qc(e[r]);if(!(i=null!=t&&n(t,u)))break;t=t[u]}return i||++r!=o?i:(o=null==t?0:t.length,!!o&&Nc(o)&&Mc(u,o)&&($c(t)||Rc(t)))}function Ct(t,e){return null!=t&&Ic(t,e,Dc)}function Ut(t,e){return Wc(t)&&Gc(e)?Hc(Zc(t),e):function(n){var r=Vc(n,t);return void 0===r&&r===e?Jc(n,t):Lc(e,r,Qc|Xc)}}function Rt(t){return t}function $t(t){return function(e){return null==e?void 0:e[t]}}function Mt(t){return function(e){return ns(e,t)}}function Nt(t){return us(t)?os(as(t)):is(t)}function qt(t){return"function"==typeof t?t:null==t?ls:"object"==typeof t?ps(t)?fs(t[0],t[1]):ss(t):hs(t)}function Bt(t,e,n,r,o){return o(t,function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)}),n}function Dt(t,e,n){var r=ms(t)?ds:gs,o=arguments.length<3;return r(t,bs(e,4),n,o,_s)}function It(t,e){var n=-1,r=Os(t)?Array(t.length):[];return ws(t,function(t,o,i){r[++n]=e(t,o,i)}),r}function Kt(t,e){var n=As(t)?xs:Ps;return n(t,ks(e,3))}function Lt(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Vt(t,e){var n=!0;return Bs(t,function(t,r,o){return n=!!e(t,r,o)}),n}function Jt(t,e,n){if(!Vs(n))return!1;var r=typeof e;return!!("number"==r?Ks(n)&&Ls(e,n.length):"string"==r&&e in n)&&Is(n[e],t)}function Wt(t,e,n){var r=Zs(t)?Ws:Gs;return n&&Qs(t,e,n)&&(e=void 0),r(t,Hs(e,3))}function Gt(t,e){var n;return lf(t,function(t,r,o){return n=e(t,r,o),!n}),!!n}function Ht(t,e,n){var r=df(t)?hf:vf;return n&&_f(t,e,n)&&(e=void 0),r(t,yf(e,3))}function Zt(t){return function(e,n,r){var o=Object(e);if(!Of(e)){var i=wf(n,3);e=Sf(e),n=function(t){return i(o[t],t,o)}}var u=t(e,n,r);return u>-1?o[i?e[u]:u]:void 0}}function Qt(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function Xt(t){if("number"==typeof t)return t;if(Af(t))return Tf;if(Pf(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Pf(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(zf,"");var n=Ff.test(t);return n||Cf.test(t)?Uf(t.slice(2),n?2:8):Ef.test(t)?Tf:+t}function Yt(t){if(!t)return 0===t?t:0;if(t=$f(t),t===Mf||t===-Mf){var e=t<0?-1:1;return e*Nf}return t===t?t:0}function te(t){var e=Bf(t),n=e%1;return e===e?n?e-n:e:0}function ee(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Lf(n);return o<0&&(o=Vf(r+o,0)),If(t,Kf(e,3),o)}var ne=Array.isArray,re=ne,oe=t,ie=e,ue=ie,ae=ue(),ce=ae,se=n,fe="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},le="object"==typeof fe&&fe&&fe.Object===Object&&fe,pe=le,he=pe,ye="object"==typeof self&&self&&self.Object===Object&&self,ve=he||ye||Function("return this")(),de=ve,_e=de,be=_e.Symbol,ge=be,me=ge,je=Object.prototype,we=je.hasOwnProperty,Oe=je.toString,Se=me?me.toStringTag:void 0,xe=o,ke=Object.prototype,Pe=ke.toString,Ae=i,Te=ge,ze=xe,Ee=Ae,Fe="[object Null]",Ce="[object Undefined]",Ue=Te?Te.toStringTag:void 0,Re=u,$e=a,Me=Re,Ne=$e,qe="[object Arguments]",Be=c,De=Be,Ie=$e,Ke=Object.prototype,Le=Ke.hasOwnProperty,Ve=Ke.propertyIsEnumerable,Je=De(function(){return arguments}())?De:function(t){return Ie(t)&&Le.call(t,"callee")&&!Ve.call(t,"callee")},We=Je,Ge=s,He=r(function(t,e){var n=de,r=Ge,o="object"==typeof e&&e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o,a=u?n.Buffer:void 0,c=a?a.isBuffer:void 0,s=c||r;t.exports=s}),Ze=9007199254740991,Qe=/^(?:0|[1-9]\d*)$/,Xe=f,Ye=9007199254740991,tn=l,en=Re,nn=tn,rn=$e,on="[object Arguments]",un="[object Array]",an="[object Boolean]",cn="[object Date]",sn="[object Error]",fn="[object Function]",ln="[object Map]",pn="[object Number]",hn="[object Object]",yn="[object RegExp]",vn="[object Set]",dn="[object String]",_n="[object WeakMap]",bn="[object ArrayBuffer]",gn="[object DataView]",mn="[object Float32Array]",jn="[object Float64Array]",wn="[object Int8Array]",On="[object Int16Array]",Sn="[object Int32Array]",xn="[object Uint8Array]",kn="[object Uint8ClampedArray]",Pn="[object Uint16Array]",An="[object Uint32Array]",Tn={};Tn[mn]=Tn[jn]=Tn[wn]=Tn[On]=Tn[Sn]=Tn[xn]=Tn[kn]=Tn[Pn]=Tn[An]=!0,Tn[on]=Tn[un]=Tn[bn]=Tn[an]=Tn[gn]=Tn[cn]=Tn[sn]=Tn[fn]=Tn[ln]=Tn[pn]=Tn[hn]=Tn[yn]=Tn[vn]=Tn[dn]=Tn[_n]=!1;var zn=p,En=h,Fn=r(function(t,e){var n=pe,r="object"==typeof e&&e&&!e.nodeType&&e,o=r&&"object"==typeof t&&t&&!t.nodeType&&t,i=o&&o.exports===r,u=i&&n.process,a=function(){try{return u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}),Cn=zn,Un=En,Rn=Fn,$n=Rn&&Rn.isTypedArray,Mn=$n?Un($n):Cn,Nn=Mn,qn=se,Bn=We,Dn=re,In=He,Kn=Xe,Ln=Nn,Vn=Object.prototype,Jn=Vn.hasOwnProperty,Wn=y,Gn=Object.prototype,Hn=v,Zn=d,Qn=Zn,Xn=Qn(Object.keys,Object),Yn=Xn,tr=Hn,er=Yn,nr=Object.prototype,rr=nr.hasOwnProperty,or=_,ir=b,ur=Re,ar=ir,cr="[object AsyncFunction]",sr="[object Function]",fr="[object GeneratorFunction]",lr="[object Proxy]",pr=g,hr=pr,yr=tn,vr=m,dr=Wn,_r=or,br=vr,gr=j,mr=ce,jr=gr,wr=w,Or=vr,Sr=O,xr=wr,kr=Sr,Pr=kr(xr),Ar=Pr,Tr=S,zr=x,Er=zr,Fr=k,Cr=Fr,Ur=Array.prototype,Rr=Ur.splice,$r=P,Mr=Fr,Nr=A,qr=Fr,Br=T,Dr=Fr,Ir=z,Kr=Tr,Lr=$r,Vr=Nr,Jr=Br,Wr=Ir;E.prototype.clear=Kr,E.prototype.delete=Lr,E.prototype.get=Vr,E.prototype.has=Jr,E.prototype.set=Wr;var Gr=E,Hr=Gr,Zr=F,Qr=C,Xr=U,Yr=R,to=de,eo=to["__core-js_shared__"],no=eo,ro=no,oo=function(){var t=/[^.]+$/.exec(ro&&ro.keys&&ro.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),io=$,uo=Function.prototype,ao=uo.toString,co=M,so=pr,fo=io,lo=ir,po=co,ho=/[\\^$.*+?()[\]{}|]/g,yo=/^\[object .+?Constructor\]$/,vo=Function.prototype,_o=Object.prototype,bo=vo.toString,go=_o.hasOwnProperty,mo=RegExp("^"+bo.call(go).replace(ho,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jo=N,wo=q,Oo=jo,So=wo,xo=B,ko=xo,Po=de,Ao=ko(Po,"Map"),To=Ao,zo=xo,Eo=zo(Object,"create"),Fo=Eo,Co=Fo,Uo=D,Ro=I,$o=Fo,Mo="__lodash_hash_undefined__",No=Object.prototype,qo=No.hasOwnProperty,Bo=K,Do=Fo,Io=Object.prototype,Ko=Io.hasOwnProperty,Lo=L,Vo=Fo,Jo="__lodash_hash_undefined__",Wo=V,Go=Uo,Ho=Ro,Zo=Bo,Qo=Lo,Xo=Wo;J.prototype.clear=Go,J.prototype.delete=Ho,J.prototype.get=Zo,J.prototype.has=Qo,J.prototype.set=Xo;var Yo=J,ti=Yo,ei=Gr,ni=To,ri=W,oi=G,ii=oi,ui=H,ai=ui,ci=Z,si=ui,fi=Q,li=ui,pi=X,hi=ui,yi=Y,vi=ri,di=ci,_i=fi,bi=pi,gi=yi;tt.prototype.clear=vi,tt.prototype.delete=di,tt.prototype.get=_i,tt.prototype.has=bi,tt.prototype.set=gi;var mi=tt,ji=Gr,wi=To,Oi=mi,Si=200,xi=et,ki=Gr,Pi=Zr,Ai=Qr,Ti=Xr,zi=Yr,Ei=xi;nt.prototype.clear=Pi,nt.prototype.delete=Ai,nt.prototype.get=Ti,nt.prototype.has=zi,nt.prototype.set=Ei;var Fi=nt,Ci="__lodash_hash_undefined__",Ui=rt,Ri=ot,$i=mi,Mi=Ui,Ni=Ri;it.prototype.add=it.prototype.push=Mi,it.prototype.has=Ni;var qi=it,Bi=ut,Di=at,Ii=qi,Ki=Bi,Li=Di,Vi=1,Ji=2,Wi=ct,Gi=de,Hi=Gi.Uint8Array,Zi=Hi,Qi=st,Xi=ft,Yi=ge,tu=Zi,eu=zr,nu=Wi,ru=Qi,ou=Xi,iu=1,uu=2,au="[object Boolean]",cu="[object Date]",su="[object Error]",fu="[object Map]",lu="[object Number]",pu="[object RegExp]",hu="[object Set]",yu="[object String]",vu="[object Symbol]",du="[object ArrayBuffer]",_u="[object DataView]",bu=Yi?Yi.prototype:void 0,gu=bu?bu.valueOf:void 0,mu=lt,ju=gr,wu=1,Ou=Object.prototype,Su=Ou.hasOwnProperty,xu=pt,ku=xo,Pu=de,Au=ku(Pu,"DataView"),Tu=Au,zu=xo,Eu=de,Fu=zu(Eu,"Promise"),Cu=Fu,Uu=xo,Ru=de,$u=Uu(Ru,"Set"),Mu=$u,Nu=xo,qu=de,Bu=Nu(qu,"WeakMap"),Du=Bu,Iu=Tu,Ku=To,Lu=Cu,Vu=Mu,Ju=Du,Wu=Re,Gu=co,Hu="[object Map]",Zu="[object Object]",Qu="[object Promise]",Xu="[object Set]",Yu="[object WeakMap]",ta="[object DataView]",ea=Gu(Iu),na=Gu(Ku),ra=Gu(Lu),oa=Gu(Vu),ia=Gu(Ju),ua=Wu;(Iu&&ua(new Iu(new ArrayBuffer(1)))!=ta||Ku&&ua(new Ku)!=Hu||Lu&&ua(Lu.resolve())!=Qu||Vu&&ua(new Vu)!=Xu||Ju&&ua(new Ju)!=Yu)&&(ua=function(t){var e=Wu(t),n=e==Zu?t.constructor:void 0,r=n?Gu(n):"";if(r)switch(r){case ea:return ta;case na:return Hu;case ra:return Qu;case oa:return Xu;case ia:return Yu}return e});var aa=ua,ca=Fi,sa=Wi,fa=mu,la=xu,pa=aa,ha=re,ya=He,va=Nn,da=1,_a="[object Arguments]",ba="[object Array]",ga="[object Object]",ma=Object.prototype,ja=ma.hasOwnProperty,wa=ht,Oa=wa,Sa=ir,xa=$e,ka=yt,Pa=Fi,Aa=ka,Ta=1,za=2,Ea=vt,Fa=ir,Ca=dt,Ua=Ca,Ra=gr,$a=_t,Ma=bt,Na=Ea,qa=$a,Ba=Ma,Da=gt,Ia=Re,Ka=$e,La="[object Symbol]",Va=mt,Ja=re,Wa=Va,Ga=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ha=/^\w*$/,Za=jt,Qa=mi,Xa="Expected a function";wt.Cache=Qa;var Ya=wt,tc=Ya,ec=500,nc=Ot,rc=nc,oc=/^\./,ic=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,uc=/\\(\\)?/g,ac=rc(function(t){var e=[];return oc.test(t)&&e.push(""),t.replace(ic,function(t,n,r,o){e.push(r?o.replace(uc,"$1"):n||t)}),e}),cc=ac,sc=St,fc=ge,lc=sc,pc=re,hc=Va,yc=1/0,vc=fc?fc.prototype:void 0,dc=vc?vc.toString:void 0,_c=xt,bc=_c,gc=kt,mc=re,jc=Za,wc=cc,Oc=gc,Sc=Pt,xc=Va,kc=1/0,Pc=At,Ac=Sc,Tc=Pc,zc=Tt,Ec=zc,Fc=zt,Cc=Et,Uc=Sc,Rc=We,$c=re,Mc=Xe,Nc=tn,qc=Pc,Bc=Ft,Dc=Cc,Ic=Bc,Kc=Ct,Lc=ka,Vc=Fc,Jc=Kc,Wc=Za,Gc=Ca,Hc=Ma,Zc=Pc,Qc=1,Xc=2,Yc=Ut,ts=Rt,es=$t,ns=zc,rs=Mt,os=es,is=rs,us=Za,as=Pc,cs=Nt,ss=Da,fs=Yc,ls=ts,ps=re,hs=cs,ys=qt,vs=Bt,ds=oe,_s=Ar,bs=ys,gs=vs,ms=re,js=Dt,ws=Ar,Os=vr,Ss=It,xs=sc,ks=ys,Ps=Ss,As=re,Ts=Kt,zs=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Es=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),Fs=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},Cs=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},Us=function(){function t(){zs(this,t)}return Es(t,[{key:"underscorifyKeys",value:function(){var t=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},e=js(this,function(e,n,r){return e[t(r)]=re(n)?Ts(n,function(t){return t.underscorifyKeys()}):n,e},{});return e}}]),t}(),Rs=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Ts(t,function(t,e){return n[r(e)]=t}),Object.seal(n),n}return Fs(e,t),e}(Us),$s=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.mode=r("mode"),n.list=r("list"),Object.seal(n),n}return Fs(e,t),e}(Us),Ms=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Ts(t,function(t,e){return n[r(e)]=t}),n.extensionFilter=new $s(n.extensionFilter),Object.seal(n),n}return Fs(e,t),e}(Us),Ns=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.destinationType=r("destinationType"),n.destination=r("destination"),n}return Fs(e,t),e}(Us),qs=Lt,Bs=Ar,Ds=Vt,Is=zr,Ks=vr,Ls=Xe,Vs=ir,Js=Jt,Ws=qs,Gs=Ds,Hs=ys,Zs=re,Qs=Js,Xs=Wt,Ys=null,tf=null,ef=null,nf=null,rf=!1,of=null;"undefined"!=typeof process&&"node"===process.release.name?(Ys=require("node-fetch"),tf=require("fs"),ef=require("path"),nf=require("mime-types").lookup,of=require("form-data"),rf=!0):(Ys=window.fetch,of=window.FormData);var uf=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return rf?"string"==typeof t?(n.filename=ef.basename(t),n.contentType=nf(t),n.stream=tf.readFileSync(t)):Xs(["filename","stream","contentType"],function(e){return e in t})&&(n.filename=t.filename,n.contentType=t.contentType,n.stream=t.stream):n.file=t,n.guid=null,Object.seal(n),n}return Fs(e,t),e}(Us),af=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return Ts(["guid","recipients","subject","attachments","securityProfile","message","replyEnabled","uploadUrl","publicEncryptionKey","notificationLanguage"],function(t){return n[t]=null}),n.userEmail=t,Object.preventExtensions(n),n}return Fs(e,t),Es(e,[{key:"toJson",value:function(){var t=this.securityProfile,e=this.attachments;delete this.securityProfile,delete this.attachments;var n=this.underscorifyKeys();return n.security_profile_id=t.id,n.document_ids=js(e,function(t,e){return t.push(e.guid),t},[]),n.group_replies=t.groupReplies.value,n.expiration_value=t.expirationValue.value,n.expiration_unit=t.expirationUnit.value,n.retention_period_type=t.retentionPeriodType.value,n.retention_period_value=t.retentionPeriodValue.value,n.retention_period_unit=t.retentionPeriodUnit.value,n.encrypt_message=t.encryptMessage.value,n.double_encryption=t.doubleEncryption.value,n.reply_enabled=t.replyEnabled.value,n.notification_language="en",JSON.stringify({safebox:n})}}]),e}(Us),cf=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.email=r("email"),n.firstName=r("first_name"),n.lastName=r("last_name"),n.companyName=r("company_name"),n.contactMethods=null,t&&"contact_methods"in t&&(n.contactMethods=t.contact_methods.map(function(t){new Ns(t)})),Object.seal(n),n}return Fs(e,t),e}(Us),sf=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.previewUrl=r("preview_url"),n.encryptionKey=r("encryptionKey"),n.guid=r("guid"),Object.seal(n),n}return Fs(e,t),e}(Us),ff={};ff.SecurityProfile=Rs,ff.EnterpriseSettings=Ms,ff.ExtensionFilter=$s,ff.ContactMethod=Ns,ff.Attachment=uf,ff.Recipient=cf,ff.Safebox=af,ff.SafeboxResponse=sf;var lf=Ar,pf=Gt,hf=Bi,yf=ys,vf=pf,df=re,_f=Js,bf=Ht,gf=function(t){function e(t,n,r){zs(this,e);var o=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.code=t,o.message=n,o.responseContent=r,o}return Fs(e,t),e}(Error),mf=function(t){function e(t,n){return zs(this,e),Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n))}return Fs(e,t),e}(gf),jf=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";zs(this,t),this.apiToken=e,this.endpoint=r,this.locale=o,this.enterpriseAccount=n}return Es(t,[{key:"_getSendSecureEndpoint",value:function(t,e){var n=e+"/services/"+t+"/sendsecure/server/url";return Ys(n,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new mf(1,"unexpected server response format");return e}throw new gf(t.status,t.statusText)})}},{key:"_makeRequest",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{headers:{"Authorization-Token":this.apiToken},method:"get"};return this._getSendSecureEndpoint(this.enterpriseAccount,this.endpoint).then(function(n){var r=""+n+t;return Ys(r,e)}).then(function(t){return t.ok?t.json():t.text().then(function(e){throw new gf(t.status,t.statusText,e)})})}},{key:"newSafebox",value:function(t){var e="api/v2/safeboxes/new?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"securityProfiles",value:function(t){var e="api/v2/enterprises/"+this.enterpriseAccount+"/security_profiles?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"enterpriseSettings",value:function(){var t="api/v2/enterprises/"+this.enterpriseAccount+"/settings?locale="+this.locale;return this._makeRequest(t)}},{key:"uploadFile",value:function(t,e){if(!bf(["file","filePath","fileStream"],function(t){return t in e}))throw new gf("0","upload File arguments error");if(!rf){if("file"in e&&e.file instanceof File)return this._uploadFileBrowser(t,e.file);throw new gf("0",'"file" argument should be an instance of File')}if("filePath"in e){if(tf.existsSync(e.filePath)){var n=tf.readFileSync(e.filePath),r=e.contentType||nf(e.filePath),o=e.filename||ef.basename(e.filePath);return this._uploadFileNode(t,n,r,o)}throw new gf("0",e.filePath+" does not exist")}if(Xs(["fileStream","contentType","filename"],function(t){return t in e}))return this._uploadFileNode(t,e.fileStream,e.contentType,e.filename)}},{key:"_uploadFileBrowser",value:function(t,e){var n=new of;return n.append("file",e,e.name),Ys(t,{method:"post",body:n}).then(function(t){if(t.ok)return t.json();throw new gf(t.status,t.statusText)})}},{key:"_uploadFileNode",value:function(t,e,n,r){var o=new of;return o.append("file",e,r),Ys(t,{method:"post",body:o}).then(function(t){if(t.ok)return t.json();throw new gf(t.status,t.statusText)})}},{key:"commitSafebox",value:function(t){var e="api/v2/safeboxes?locale="+this.locale;return this._makeRequest(e,{headers:{"Authorization-Token":this.apiToken,"Content-Type":"application/json"},method:"post",body:t})}}]),t}(),wf=ys,Of=vr,Sf=gr,xf=Zt,kf=Qt,Pf=ir,Af=Va,Tf=NaN,zf=/^\s+|\s+$/g,Ef=/^[-+]0x[0-9a-f]+$/i,Ff=/^0b[01]+$/i,Cf=/^0o[0-7]+$/i,Uf=parseInt,Rf=Xt,$f=Rf,Mf=1/0,Nf=1.7976931348623157e308,qf=Yt,Bf=qf,Df=te,If=kf,Kf=ys,Lf=Df,Vf=Math.max,Jf=ee,Wf=xf,Gf=Jf,Hf=Wf(Gf),Zf=Hf,Qf=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";zs(this,t),this.apiToken=e,this.enterpriseAccount=n,this.endpoint=r,this.locale=o,this.jsonClient=new jf(e,n,r,o)}return Es(t,[{key:"submitSafebox",value:function(t){var e=this;return this.initializeSafebox(t).then(function(t){var n=Ts(t.attachments,function(n){return e.uploadAttachment(t,n)});return Promise.all(n).then(function(e){return t.attachments=e,t})}).then(function(t){return t.securityProfile?e.commitSafebox(t):e.defaultSecurityProfile(t.userEmail).then(function(n){return t.securityProfile=n,e.commitSafebox(t)})}).catch(function(t){throw t})}},{key:"initializeSafebox",value:function(t){return this.jsonClient.newSafebox(t.userEmail).then(function(e){return t.guid=e.guid,t.publicEncryptionKey=e.public_encryption_key,t.uploadUrl=e.upload_url,t}).catch(function(t){throw t})}},{key:"defaultSecurityProfile",value:function(t){var e=this;return this.securityProfiles(t).then(function(n){return e.enterpriseSettings(t).then(function(t){return Zf(n,function(e){return e.id==t.defaultSecurityProfileId})})}).catch(function(t){throw t})}},{key:"uploadAttachment",value:function(t,e){return rf?this.jsonClient.uploadFile(t.uploadUrl,{fileStream:e.stream,contentType:e.contentType,filename:e.filename}).then(function(t){return e.guid=t.temporary_document.document_guid,e}):this.jsonClient.uploadFile(t.uploadUrl,{file:e.file}).then(function(t){return e.guid=t.temporary_document.document_guid,e})}},{key:"commitSafebox",value:function(t){return this.jsonClient.commitSafebox(t.toJson()).then(function(t){return new ff.SafeboxResponse(t)}).catch(function(t){throw t})}},{key:"securityProfiles",value:function(t){return this.jsonClient.securityProfiles(t).then(function(t){return t.security_profiles.map(function(t){return new ff.SecurityProfile(t)})})}},{key:"enterpriseSettings",value:function(){return this.jsonClient.enterpriseSettings().then(function(t){return new ff.EnterpriseSettings(t)})}}],[{key:"getUserToken",value:function(t,e,n,r,o){var i=(arguments.length>5&&void 0!==arguments[5]?arguments[5]:"sendsecure-js",arguments[6]),u=arguments[7],a=i+"/services/"+t+"/portal/host";return Ys(a,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new mf(1,"unexpected server response format");return e}throw new gf(t.status,t.statusText)}).then(function(i){var a=i+"api/user_token",c=new of;return c.append("permalink",t),c.append("username",e),c.append("password",n),u&&c.append("otp",u),c.append("application_type","sendsecure-js"),c.append("device_id",r),c.append("device_name",o),Ys(a,{method:"POST",body:c}).then(function(t){var e=t.json();if(!e)throw new gf(t.status,t.statusText);return e}).then(function(t){if(t.result)return t.token;throw new gf(t.code,t.message)})}).catch(function(t){if(t instanceof gf)throw t;throw new gf(t.code,t.message)})}}]),t}(),Xf={};return Xf.JsonClient=jf,Xf.Client=Qf,Xf.Helpers=ff,Xf}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
