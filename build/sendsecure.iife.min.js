var SendSecure=function(){"use strict";function t(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function e(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function n(t){return function(e,n,r){for(var o=-1,i=Object(e),u=r(e),a=u.length;a--;){var c=u[t?a:++o];if(n(i[c],c,i)===!1)break}return e}}function r(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function o(t,e){return e={exports:{}},t(e,e.exports),e.exports}function i(t){var e=Oe.call(t,xe),n=t[xe];try{t[xe]=void 0;var r=!0}catch(t){}var o=Se.call(t);return r&&(e?t[xe]=n:delete t[xe]),o}function u(t){return Ae.call(t)}function a(t){return null==t?void 0===t?Ue:Ce:(t=Object(t),Re&&Re in t?Ee(t):Fe(t))}function c(t){return null!=t&&"object"==typeof t}function s(t){return qe(t)&&Ne(t)==Be}function f(){return!1}function l(t,e){return e=null==e?Qe:e,!!e&&("number"==typeof t||Xe.test(t))&&t>-1&&t%1==0&&t<e}function p(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=tn}function h(t){return on(t)&&rn(t.length)&&!!zn[nn(t)]}function y(t){return function(e){return t(e)}}function v(t,e){var n=In(t),r=!n&&Dn(t),o=!n&&!r&&Kn(t),i=!n&&!r&&!o&&Vn(t),u=n||r||o||i,a=u?Bn(t.length,String):[],c=a.length;for(var s in t)!e&&!Wn.call(t,s)||u&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Ln(s,c))||a.push(s);return a}function d(t){var e=t&&t.constructor,n="function"==typeof e&&e.prototype||Hn;return t===n}function _(t,e){return function(n){return t(e(n))}}function b(t){if(!er(t))return nr(t);var e=[];for(var n in Object(t))or.call(t,n)&&"constructor"!=n&&e.push(n);return e}function g(t){if(!ar(t))return!1;var e=ur(t);return e==sr||e==fr||e==cr||e==lr}function m(t){return null!=t&&yr(t.length)&&!hr(t)}function j(t){return br(t)?dr(t):_r(t)}function w(t,e){return t&&mr(t,e,jr)}function O(t,e){return function(n,r){if(null==n)return n;if(!Or(n))return t(n,r);for(var o=n.length,i=e?o:-1,u=Object(n);(e?i--:++i<o)&&r(u[i],i,u)!==!1;);return n}}function S(){this.__data__=[],this.size=0}function x(t,e){return t===e||t!==t&&e!==e}function k(t,e){for(var n=t.length;n--;)if(Er(t[n][0],e))return n;return-1}function P(t){var e=this.__data__,n=Cr(e,t);if(n<0)return!1;var r=e.length-1;return n==r?e.pop():Rr.call(e,n,1),--this.size,!0}function A(t){var e=this.__data__,n=Mr(e,t);return n<0?void 0:e[n][1]}function T(t){return qr(this.__data__,t)>-1}function z(t,e){var n=this.__data__,r=Dr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}function E(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function F(){this.__data__=new Hr,this.size=0}function C(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}function U(t){return this.__data__.get(t)}function R(t){return this.__data__.has(t)}function $(t){return!!oo&&oo in t}function M(t){if(null!=t){try{return ao.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function N(t){if(!lo(t)||fo(t))return!1;var e=so(t)?mo:yo;return e.test(po(t))}function q(t,e){return null==t?void 0:t[e]}function B(t,e){var n=So(t,e);return Oo(n)?n:void 0}function D(){this.__data__=Co?Co(null):{},this.size=0}function I(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}function K(t){var e=this.__data__;if($o){var n=e[t];return n===Mo?void 0:n}return qo.call(e,t)?e[t]:void 0}function L(t){var e=this.__data__;return Do?void 0!==e[t]:Ko.call(e,t)}function V(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Vo&&void 0===e?Jo:e,this}function J(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function W(){this.size=0,this.__data__={hash:new ti,map:new(ni||ei),string:new ti}}function G(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function H(t,e){var n=t.__data__;return ii(e)?n["string"==typeof e?"string":"hash"]:n.map}function Z(t){var e=ai(this,t).delete(t);return this.size-=e?1:0,e}function Q(t){return si(this,t).get(t)}function X(t){return li(this,t).has(t)}function Y(t,e){var n=hi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}function tt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function et(t,e){var n=this.__data__;if(n instanceof ji){var r=n.__data__;if(!wi||r.length<Si-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Oi(r)}return n.set(t,e),this.size=n.size,this}function nt(t){var e=this.__data__=new ki(t);this.size=e.size}function rt(t){return this.__data__.set(t,Ci),this}function ot(t){return this.__data__.has(t)}function it(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new $i;++e<n;)this.add(t[e])}function ut(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function at(t,e){return t.has(e)}function ct(t,e,n,r,o,i){var u=n&Vi,a=t.length,c=e.length;if(a!=c&&!(u&&c>a))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var f=-1,l=!0,p=n&Ji?new Ii:void 0;for(i.set(t,e),i.set(e,t);++f<a;){var h=t[f],y=e[f];if(r)var v=u?r(y,h,f,e,t,i):r(h,y,f,t,e,i);if(void 0!==v){if(v)continue;l=!1;break}if(p){if(!Ki(e,function(t,e){if(!Li(p,e)&&(h===t||o(h,t,n,r,i)))return p.push(e)})){l=!1;break}}else if(h!==y&&!o(h,y,n,r,i)){l=!1;break}}return i.delete(t),i.delete(e),l}function st(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function ft(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function lt(t,e,n,r,o,i,u){switch(n){case _u:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case du:return!(t.byteLength!=e.byteLength||!i(new tu(t),new tu(e)));case au:case cu:case lu:return eu(+t,+e);case su:return t.name==e.name&&t.message==e.message;case pu:case yu:return t==e+"";case fu:var a=ru;case hu:var c=r&iu;if(a||(a=ou),t.size!=e.size&&!c)return!1;var s=u.get(t);if(s)return s==e;r|=uu,u.set(t,e);var f=nu(a(t),a(e),r,o,i,u);return u.delete(t),f;case vu:if(gu)return gu.call(t)==gu.call(e)}return!1}function pt(t,e,n,r,o,i){var u=n&wu,a=ju(t),c=a.length,s=ju(e),f=s.length;if(c!=f&&!u)return!1;for(var l=c;l--;){var p=a[l];if(!(u?p in e:Su.call(e,p)))return!1}var h=i.get(t);if(h&&i.get(e))return h==e;var y=!0;i.set(t,e),i.set(e,t);for(var v=u;++l<c;){p=a[l];var d=t[p],_=e[p];if(r)var b=u?r(_,d,p,e,t,i):r(d,_,p,t,e,i);if(!(void 0===b?d===_||o(d,_,n,r,i):b)){y=!1;break}v||(v="constructor"==p)}if(y&&!v){var g=t.constructor,m=e.constructor;g!=m&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof m&&m instanceof m)&&(y=!1)}return i.delete(t),i.delete(e),y}function ht(t,e,n,r,o,i){var u=ha(t),a=ha(e),c=ba,s=ba;u||(c=pa(t),c=c==_a?ga:c),a||(s=pa(e),s=s==_a?ga:s);var f=c==ga,l=s==ga,p=c==s;if(p&&ya(t)){if(!ya(e))return!1;u=!0,f=!1}if(p&&!f)return i||(i=new ca),u||va(t)?sa(t,e,n,r,o,i):fa(t,e,c,n,r,o,i);if(!(n&da)){var h=f&&ja.call(t,"__wrapped__"),y=l&&ja.call(e,"__wrapped__");if(h||y){var v=h?t.value():t,d=y?e.value():e;return i||(i=new ca),o(v,d,n,r,i)}}return!!p&&(i||(i=new ca),la(t,e,n,r,o,i))}function yt(t,e,n,r,o){return t===e||(null==t||null==e||!Sa(t)&&!xa(e)?t!==t&&e!==e:Oa(t,e,n,r,yt,o))}function vt(t,e,n,r){var o=n.length,i=o,u=!r;if(null==t)return!i;for(t=Object(t);o--;){var a=n[o];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++o<i;){a=n[o];var c=a[0],s=t[c],f=a[1];if(u&&a[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Pa;if(r)var p=r(s,f,c,t,e,l);if(!(void 0===p?Aa(f,s,Ta|za,r,l):p))return!1}}return!0}function dt(t){return t===t&&!Fa(t)}function _t(t){for(var e=Ra(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Ua(o)]}return e}function bt(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}function gt(t){var e=qa(t);return 1==e.length&&e[0][2]?Ba(e[0][0],e[0][1]):function(n){return n===t||Na(n,t,e)}}function mt(t){return"symbol"==typeof t||Ka(t)&&Ia(t)==La}function jt(t,e){if(Ja(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Wa(t))||(Ha.test(t)||!Ga.test(t)||null!=e&&t in Object(e))}function wt(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(Xa);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=t.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(wt.Cache||Qa),n}function Ot(t){var e=tc(t,function(t){return n.size===ec&&n.clear(),t}),n=e.cache;return e}function St(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function xt(t){if("string"==typeof t)return t;if(pc(t))return lc(t,xt)+"";if(hc(t))return dc?dc.call(t):"";var e=t+"";return"0"==e&&1/t==-yc?"-0":e}function kt(t){return null==t?"":bc(t)}function Pt(t,e){return mc(t)?t:jc(t,e)?[t]:wc(Oc(t))}function At(t){if("string"==typeof t||xc(t))return t;var e=t+"";return"0"==e&&1/t==-kc?"-0":e}function Tt(t,e){e=Ac(e,t);for(var n=0,r=e.length;null!=t&&n<r;)t=t[Tc(e[n++])];return n&&n==r?t:void 0}function zt(t,e,n){var r=null==t?void 0:Ec(t,e);return void 0===r?n:r}function Et(t,e){return null!=t&&e in Object(t)}function Ft(t,e,n){e=Uc(e,t);for(var r=-1,o=e.length,i=!1;++r<o;){var u=qc(e[r]);if(!(i=null!=t&&n(t,u)))break;t=t[u]}return i||++r!=o?i:(o=null==t?0:t.length,!!o&&Nc(o)&&Mc(u,o)&&($c(t)||Rc(t)))}function Ct(t,e){return null!=t&&Ic(t,e,Dc)}function Ut(t,e){return Wc(t)&&Gc(e)?Hc(Zc(t),e):function(n){var r=Vc(n,t);return void 0===r&&r===e?Jc(n,t):Lc(e,r,Qc|Xc)}}function Rt(t){return t}function $t(t){return function(e){return null==e?void 0:e[t]}}function Mt(t){return function(e){return ns(e,t)}}function Nt(t){return us(t)?os(as(t)):is(t)}function qt(t){return"function"==typeof t?t:null==t?ls:"object"==typeof t?ps(t)?fs(t[0],t[1]):ss(t):hs(t)}function Bt(t,e,n,r,o){return o(t,function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)}),n}function Dt(t,e,n){var r=ms(t)?ds:gs,o=arguments.length<3;return r(t,bs(e,4),n,o,_s)}function It(t,e){var n=-1,r=Os(t)?Array(t.length):[];return ws(t,function(t,o,i){r[++n]=e(t,o,i)}),r}function Kt(t,e){var n=As(t)?xs:Ps;return n(t,ks(e,3))}function Lt(t,e){var n;return Zs(t,function(t,r,o){return n=e(t,r,o),!n}),!!n}function Vt(t,e,n){if(!ef(n))return!1;var r=typeof e;return!!("number"==r?Ys(n)&&tf(e,n.length):"string"==r&&e in n)&&Xs(n[e],t)}function Jt(t,e,n){var r=af(t)?rf:uf;return n&&cf(t,e,n)&&(e=void 0),r(t,of(e,3))}function Wt(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Gt(t,e){var n=!0;return lf(t,function(t,r,o){return n=!!e(t,r,o)}),n}function Ht(t,e,n){var r=df(t)?hf:yf;return n&&_f(t,e,n)&&(e=void 0),r(t,vf(e,3))}function Zt(t){return function(e,n,r){var o=Object(e);if(!Of(e)){var i=wf(n,3);e=Sf(e),n=function(t){return i(o[t],t,o)}}var u=t(e,n,r);return u>-1?o[i?e[u]:u]:void 0}}function Qt(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function Xt(t){if("number"==typeof t)return t;if(Af(t))return Tf;if(Pf(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Pf(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(zf,"");var n=Ff.test(t);return n||Cf.test(t)?Uf(t.slice(2),n?2:8):Ef.test(t)?Tf:+t}function Yt(t){if(!t)return 0===t?t:0;if(t=$f(t),t===Mf||t===-Mf){var e=t<0?-1:1;return e*Nf}return t===t?t:0}function te(t){var e=Bf(t),n=e%1;return e===e?n?e-n:e:0}function ee(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Lf(n);return o<0&&(o=Vf(r+o,0)),If(t,Kf(e,3),o)}var ne=t,re=Array.isArray,oe=re,ie=e,ue=n,ae=ue,ce=ae(),se=ce,fe=r,le="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},pe="object"==typeof le&&le&&le.Object===Object&&le,he=pe,ye=he,ve="object"==typeof self&&self&&self.Object===Object&&self,de=ye||ve||Function("return this")(),_e=de,be=_e,ge=be.Symbol,me=ge,je=me,we=Object.prototype,Oe=we.hasOwnProperty,Se=we.toString,xe=je?je.toStringTag:void 0,ke=i,Pe=Object.prototype,Ae=Pe.toString,Te=u,ze=me,Ee=ke,Fe=Te,Ce="[object Null]",Ue="[object Undefined]",Re=ze?ze.toStringTag:void 0,$e=a,Me=c,Ne=$e,qe=Me,Be="[object Arguments]",De=s,Ie=De,Ke=Me,Le=Object.prototype,Ve=Le.hasOwnProperty,Je=Le.propertyIsEnumerable,We=Ie(function(){return arguments}())?Ie:function(t){return Ke(t)&&Ve.call(t,"callee")&&!Je.call(t,"callee")},Ge=We,He=f,Ze=o(function(t,e){var n=_e,r=He,o="object"==typeof e&&e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o,a=u?n.Buffer:void 0,c=a?a.isBuffer:void 0,s=c||r;t.exports=s}),Qe=9007199254740991,Xe=/^(?:0|[1-9]\d*)$/,Ye=l,tn=9007199254740991,en=p,nn=$e,rn=en,on=Me,un="[object Arguments]",an="[object Array]",cn="[object Boolean]",sn="[object Date]",fn="[object Error]",ln="[object Function]",pn="[object Map]",hn="[object Number]",yn="[object Object]",vn="[object RegExp]",dn="[object Set]",_n="[object String]",bn="[object WeakMap]",gn="[object ArrayBuffer]",mn="[object DataView]",jn="[object Float32Array]",wn="[object Float64Array]",On="[object Int8Array]",Sn="[object Int16Array]",xn="[object Int32Array]",kn="[object Uint8Array]",Pn="[object Uint8ClampedArray]",An="[object Uint16Array]",Tn="[object Uint32Array]",zn={};zn[jn]=zn[wn]=zn[On]=zn[Sn]=zn[xn]=zn[kn]=zn[Pn]=zn[An]=zn[Tn]=!0,zn[un]=zn[an]=zn[gn]=zn[cn]=zn[mn]=zn[sn]=zn[fn]=zn[ln]=zn[pn]=zn[hn]=zn[yn]=zn[vn]=zn[dn]=zn[_n]=zn[bn]=!1;var En=h,Fn=y,Cn=o(function(t,e){var n=he,r="object"==typeof e&&e&&!e.nodeType&&e,o=r&&"object"==typeof t&&t&&!t.nodeType&&t,i=o&&o.exports===r,u=i&&n.process,a=function(){try{return u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}),Un=En,Rn=Fn,$n=Cn,Mn=$n&&$n.isTypedArray,Nn=Mn?Rn(Mn):Un,qn=Nn,Bn=fe,Dn=Ge,In=oe,Kn=Ze,Ln=Ye,Vn=qn,Jn=Object.prototype,Wn=Jn.hasOwnProperty,Gn=v,Hn=Object.prototype,Zn=d,Qn=_,Xn=Qn,Yn=Xn(Object.keys,Object),tr=Yn,er=Zn,nr=tr,rr=Object.prototype,or=rr.hasOwnProperty,ir=b,ur=$e,ar=ne,cr="[object AsyncFunction]",sr="[object Function]",fr="[object GeneratorFunction]",lr="[object Proxy]",pr=g,hr=pr,yr=en,vr=m,dr=Gn,_r=ir,br=vr,gr=j,mr=se,jr=gr,wr=w,Or=vr,Sr=O,xr=wr,kr=Sr,Pr=kr(xr),Ar=Pr,Tr=S,zr=x,Er=zr,Fr=k,Cr=Fr,Ur=Array.prototype,Rr=Ur.splice,$r=P,Mr=Fr,Nr=A,qr=Fr,Br=T,Dr=Fr,Ir=z,Kr=Tr,Lr=$r,Vr=Nr,Jr=Br,Wr=Ir;E.prototype.clear=Kr,E.prototype.delete=Lr,E.prototype.get=Vr,E.prototype.has=Jr,E.prototype.set=Wr;var Gr=E,Hr=Gr,Zr=F,Qr=C,Xr=U,Yr=R,to=_e,eo=to["__core-js_shared__"],no=eo,ro=no,oo=function(){var t=/[^.]+$/.exec(ro&&ro.keys&&ro.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),io=$,uo=Function.prototype,ao=uo.toString,co=M,so=pr,fo=io,lo=ne,po=co,ho=/[\\^$.*+?()[\]{}|]/g,yo=/^\[object .+?Constructor\]$/,vo=Function.prototype,_o=Object.prototype,bo=vo.toString,go=_o.hasOwnProperty,mo=RegExp("^"+bo.call(go).replace(ho,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jo=N,wo=q,Oo=jo,So=wo,xo=B,ko=xo,Po=_e,Ao=ko(Po,"Map"),To=Ao,zo=xo,Eo=zo(Object,"create"),Fo=Eo,Co=Fo,Uo=D,Ro=I,$o=Fo,Mo="__lodash_hash_undefined__",No=Object.prototype,qo=No.hasOwnProperty,Bo=K,Do=Fo,Io=Object.prototype,Ko=Io.hasOwnProperty,Lo=L,Vo=Fo,Jo="__lodash_hash_undefined__",Wo=V,Go=Uo,Ho=Ro,Zo=Bo,Qo=Lo,Xo=Wo;J.prototype.clear=Go,J.prototype.delete=Ho,J.prototype.get=Zo,J.prototype.has=Qo,J.prototype.set=Xo;var Yo=J,ti=Yo,ei=Gr,ni=To,ri=W,oi=G,ii=oi,ui=H,ai=ui,ci=Z,si=ui,fi=Q,li=ui,pi=X,hi=ui,yi=Y,vi=ri,di=ci,_i=fi,bi=pi,gi=yi;tt.prototype.clear=vi,tt.prototype.delete=di,tt.prototype.get=_i,tt.prototype.has=bi,tt.prototype.set=gi;var mi=tt,ji=Gr,wi=To,Oi=mi,Si=200,xi=et,ki=Gr,Pi=Zr,Ai=Qr,Ti=Xr,zi=Yr,Ei=xi;nt.prototype.clear=Pi,nt.prototype.delete=Ai,nt.prototype.get=Ti,nt.prototype.has=zi,nt.prototype.set=Ei;var Fi=nt,Ci="__lodash_hash_undefined__",Ui=rt,Ri=ot,$i=mi,Mi=Ui,Ni=Ri;it.prototype.add=it.prototype.push=Mi,it.prototype.has=Ni;var qi=it,Bi=ut,Di=at,Ii=qi,Ki=Bi,Li=Di,Vi=1,Ji=2,Wi=ct,Gi=_e,Hi=Gi.Uint8Array,Zi=Hi,Qi=st,Xi=ft,Yi=me,tu=Zi,eu=zr,nu=Wi,ru=Qi,ou=Xi,iu=1,uu=2,au="[object Boolean]",cu="[object Date]",su="[object Error]",fu="[object Map]",lu="[object Number]",pu="[object RegExp]",hu="[object Set]",yu="[object String]",vu="[object Symbol]",du="[object ArrayBuffer]",_u="[object DataView]",bu=Yi?Yi.prototype:void 0,gu=bu?bu.valueOf:void 0,mu=lt,ju=gr,wu=1,Ou=Object.prototype,Su=Ou.hasOwnProperty,xu=pt,ku=xo,Pu=_e,Au=ku(Pu,"DataView"),Tu=Au,zu=xo,Eu=_e,Fu=zu(Eu,"Promise"),Cu=Fu,Uu=xo,Ru=_e,$u=Uu(Ru,"Set"),Mu=$u,Nu=xo,qu=_e,Bu=Nu(qu,"WeakMap"),Du=Bu,Iu=Tu,Ku=To,Lu=Cu,Vu=Mu,Ju=Du,Wu=$e,Gu=co,Hu="[object Map]",Zu="[object Object]",Qu="[object Promise]",Xu="[object Set]",Yu="[object WeakMap]",ta="[object DataView]",ea=Gu(Iu),na=Gu(Ku),ra=Gu(Lu),oa=Gu(Vu),ia=Gu(Ju),ua=Wu;(Iu&&ua(new Iu(new ArrayBuffer(1)))!=ta||Ku&&ua(new Ku)!=Hu||Lu&&ua(Lu.resolve())!=Qu||Vu&&ua(new Vu)!=Xu||Ju&&ua(new Ju)!=Yu)&&(ua=function(t){var e=Wu(t),n=e==Zu?t.constructor:void 0,r=n?Gu(n):"";if(r)switch(r){case ea:return ta;case na:return Hu;case ra:return Qu;case oa:return Xu;case ia:return Yu}return e});var aa=ua,ca=Fi,sa=Wi,fa=mu,la=xu,pa=aa,ha=oe,ya=Ze,va=qn,da=1,_a="[object Arguments]",ba="[object Array]",ga="[object Object]",ma=Object.prototype,ja=ma.hasOwnProperty,wa=ht,Oa=wa,Sa=ne,xa=Me,ka=yt,Pa=Fi,Aa=ka,Ta=1,za=2,Ea=vt,Fa=ne,Ca=dt,Ua=Ca,Ra=gr,$a=_t,Ma=bt,Na=Ea,qa=$a,Ba=Ma,Da=gt,Ia=$e,Ka=Me,La="[object Symbol]",Va=mt,Ja=oe,Wa=Va,Ga=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ha=/^\w*$/,Za=jt,Qa=mi,Xa="Expected a function";wt.Cache=Qa;var Ya=wt,tc=Ya,ec=500,nc=Ot,rc=nc,oc=/^\./,ic=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,uc=/\\(\\)?/g,ac=rc(function(t){var e=[];return oc.test(t)&&e.push(""),t.replace(ic,function(t,n,r,o){e.push(r?o.replace(uc,"$1"):n||t)}),e}),cc=ac,sc=St,fc=me,lc=sc,pc=oe,hc=Va,yc=1/0,vc=fc?fc.prototype:void 0,dc=vc?vc.toString:void 0,_c=xt,bc=_c,gc=kt,mc=oe,jc=Za,wc=cc,Oc=gc,Sc=Pt,xc=Va,kc=1/0,Pc=At,Ac=Sc,Tc=Pc,zc=Tt,Ec=zc,Fc=zt,Cc=Et,Uc=Sc,Rc=Ge,$c=oe,Mc=Ye,Nc=en,qc=Pc,Bc=Ft,Dc=Cc,Ic=Bc,Kc=Ct,Lc=ka,Vc=Fc,Jc=Kc,Wc=Za,Gc=Ca,Hc=Ma,Zc=Pc,Qc=1,Xc=2,Yc=Ut,ts=Rt,es=$t,ns=zc,rs=Mt,os=es,is=rs,us=Za,as=Pc,cs=Nt,ss=Da,fs=Yc,ls=ts,ps=oe,hs=cs,ys=qt,vs=Bt,ds=ie,_s=Ar,bs=ys,gs=vs,ms=oe,js=Dt,ws=Ar,Os=vr,Ss=It,xs=sc,ks=ys,Ps=Ss,As=oe,Ts=Kt,zs=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Es=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),Fs=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},Cs=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},Us=function(){function t(){zs(this,t)}return Es(t,[{key:"underscorifyKeys",value:function(){var t=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},e=js(this,function(e,n,r){return e[t(r)]=oe(n)?Ts(n,function(t){return t.underscorifyKeys()}):n,e},{});return e}}]),t}(),Rs=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Ts(t,function(t,e){return n[r(e)]=t}),Object.seal(n),n}return Fs(e,t),e}(Us),$s=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.mode=r("mode"),n.list=r("list"),Object.seal(n),n}return Fs(e,t),e}(Us),Ms=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Ts(t,function(t,e){return n[r(e)]=t}),n.extensionFilter=new $s(n.extensionFilter),Object.seal(n),n}return Fs(e,t),e}(Us),Ns=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.destinationType=r("destinationType"),n.destination=r("destination"),n}return Fs(e,t),e}(Us),qs=null,Bs=null,Ds=null,Is=null,Ks=!1,Ls=null;"undefined"!=typeof process&&"node"===process.release.name?(qs=require("node-fetch"),Bs=require("fs"),Ds=require("path"),Is=require("mime-types").lookup,Ls=require("form-data"),Ks=!0):(qs=window.fetch,Ls=window.FormData);var Vs=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return Ks?"string"==typeof t?(n.filename=Ds.basename(t),n.contentType=Is(t),n.stream=Bs.readFileSync(t)):(_all(["filename","stream","contentType"]),function(e){return e in t}&&(n.filename=t.filename,n.contentType=t.contentType,n.stream=t.stream)):n.file=t,n.guid=null,Object.seal(n),n}return Fs(e,t),e}(Us),Js=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return Ts(["guid","recipients","subject","attachments","securityProfile","message","replyEnabled","uploadUrl","publicEncryptionKey","notificationLanguage"],function(t){return n[t]=null}),n.userEmail=t,Object.preventExtensions(n),n}return Fs(e,t),Es(e,[{key:"toJson",value:function(){var t=this.securityProfile,e=this.attachments;delete this.securityProfile,delete this.attachments;var n=this.underscorifyKeys();return n.security_profile_id=t.id,n.document_ids=js(e,function(t,e){return t.push(e.guid),t},[]),n.group_replies=t.groupReplies.value,n.expiration_value=t.expirationValue.value,n.expiration_unit=t.expirationUnit.value,n.retention_period_type=t.retentionPeriodType.value,n.retention_period_value=t.retentionPeriodValue.value,n.retention_period_unit=t.retentionPeriodUnit.value,n.encrypt_message=t.encryptMessage.value,n.double_encryption=t.doubleEncryption.value,n.reply_enabled=t.replyEnabled.value,n.notification_language="en",JSON.stringify({safebox:n})}}]),e}(Us),Ws=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.email=r("email"),n.firstName=r("first_name"),n.lastName=r("last_name"),n.companyName=r("company_name"),n.contactMethods=null,t&&"contact_methods"in t&&(n.contactMethods=t.contact_methods.map(function(t){new Ns(t)})),Object.seal(n),n}return Fs(e,t),e}(Us),Gs=function(t){function e(t){zs(this,e);var n=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.previewUrl=r("preview_url"),n.encryptionKey=r("encryptionKey"),n.guid=r("guid"),Object.seal(n),n}return Fs(e,t),e}(Us),Hs={};Hs.SecurityProfile=Rs,Hs.EnterpriseSettings=Ms,Hs.ExtensionFilter=$s,Hs.ContactMethod=Ns,Hs.Attachment=Vs,Hs.Recipient=Ws,Hs.Safebox=Js,Hs.SafeboxResponse=Gs;var Zs=Ar,Qs=Lt,Xs=zr,Ys=vr,tf=Ye,ef=ne,nf=Vt,rf=Bi,of=ys,uf=Qs,af=oe,cf=nf,sf=Jt,ff=Wt,lf=Ar,pf=Gt,hf=ff,yf=pf,vf=ys,df=oe,_f=nf,bf=Ht,gf=function(t){function e(t,n,r){zs(this,e);var o=Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.code=t,o.message=n,o.responseContent=r,o}return Fs(e,t),e}(Error),mf=function(t){function e(t,n){return zs(this,e),Cs(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n))}return Fs(e,t),e}(gf),jf=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";zs(this,t),this.apiToken=e,this.endpoint=r,this.locale=o,this.enterpriseAccount=n}return Es(t,[{key:"_getSendSecureEndpoint",value:function(t,e){var n=e+"/services/"+t+"/sendsecure/server/url";return qs(n,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new mf(1,"unexpected server response format");return e}throw new gf(t.status,t.statusText)})}},{key:"_makeRequest",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{headers:{"Authorization-Token":this.apiToken},method:"get"};return this._getSendSecureEndpoint(this.enterpriseAccount,this.endpoint).then(function(n){var r=""+n+t;return qs(r,e)}).then(function(t){return t.ok?t.json():t.text().then(function(e){throw new gf(t.status,t.statusText,e)})})}},{key:"newSafebox",value:function(t){var e="api/v2/safeboxes/new?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"securityProfiles",value:function(t){var e="api/v2/enterprises/"+this.enterpriseAccount+"/security_profiles?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"enterpriseSettings",value:function(t){var e="api/v2/enterprises/"+this.enterpriseAccount+"/settings?locale="+this.locale;return this._makeRequest(e)}},{key:"uploadFile",value:function(t,e){if(!sf(["file","filePath","fileStream"],function(t){return t in e}))throw new gf("0","upload File arguments error");if(!Ks){if("file"in e&&e.file instanceof File)return this._uploadFileBrowser(t,e.file);throw new gf("0",'"file" argument should be an instance of File')}if("filePath"in e){if(Bs.existsSync(e.filePath)){var n=Bs.readFileSync(e.filePath),r=e.contentType||Is(e.filePath),o=e.filename||Ds.basename(e.filePath);return this._uploadFileNode(t,n,r,o)}throw new gf("0",e.filePath+" does not exist")}if(bf(["fileStream","contentType","filename"],function(t){return t in e}))return this._uploadFileNode(t,e.fileStream,e.contentType,e.filename)}},{key:"_uploadFileBrowser",value:function(t,e){var n=new Ls;return n.append("file",e,e.name),qs(t,{method:"post",body:n}).then(function(t){if(t.ok)return t.json();throw new gf(t.status,t.statusText)})}},{key:"_uploadFileNode",value:function(t,e,n,r){var o=new Ls;return o.append("file",e,r),qs(t,{method:"post",body:o}).then(function(t){if(t.ok)return t.json();throw new gf(t.status,t.statusText)})}},{key:"commitSafebox",value:function(t){var e="api/v2/safeboxes?locale="+this.locale;return this._makeRequest(e,{headers:{"Authorization-Token":this.apiToken,"Content-Type":"application/json"},method:"post",body:t})}}]),t}(),wf=ys,Of=vr,Sf=gr,xf=Zt,kf=Qt,Pf=ne,Af=Va,Tf=NaN,zf=/^\s+|\s+$/g,Ef=/^[-+]0x[0-9a-f]+$/i,Ff=/^0b[01]+$/i,Cf=/^0o[0-7]+$/i,Uf=parseInt,Rf=Xt,$f=Rf,Mf=1/0,Nf=1.7976931348623157e308,qf=Yt,Bf=qf,Df=te,If=kf,Kf=ys,Lf=Df,Vf=Math.max,Jf=ee,Wf=xf,Gf=Jf,Hf=Wf(Gf),Zf=Hf,Qf=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";zs(this,t),this.apiToken=e,this.enterpriseAccount=n,this.endpoint=r,this.locale=o,this.jsonClient=new jf(e,n,r,o)}return Es(t,[{key:"submitSafebox",value:function(t){var e=this;return this.initializeSafebox(t).then(function(t){var n=Ts(t.attachments,function(n){return e.uploadAttachment(t,n)});return Promise.all(n).then(function(e){return t.attachments=e,t})}).then(function(t){return t.securityProfile?e.commitSafebox(t):e.defaultSecurityProfile(t.userEmail).then(function(n){return t.securityProfile=n,e.commitSafebox(t)})}).catch(function(t){throw t})}},{key:"initializeSafebox",value:function(t){return this.jsonClient.newSafebox(t.userEmail).then(function(e){return t.guid=e.guid,t.publicEncryptionKey=e.public_encryption_key,t.uploadUrl=e.upload_url,t}).catch(function(t){throw t})}},{key:"defaultSecurityProfile",value:function(t){var e=this;return this.securityProfiles(t).then(function(n){return e.enterpriseSettings(t).then(function(t){return Zf(n,function(e){return e.id==t.defaultSecurityProfileId})})}).catch(function(t){throw t})}},{key:"uploadAttachment",value:function(t,e){return Ks?this.jsonClient.uploadFile(t.uploadUrl,{fileStream:e.stream,contentType:e.contentType,filename:e.filename}).then(function(t){return e.guid=t.temporary_document.document_guid,e}):this.jsonClient.uploadFile(t.uploadUrl,{file:e.file}).then(function(t){return e.guid=t.temporary_document.document_guid,e})}},{key:"commitSafebox",value:function(t){return this.jsonClient.commitSafebox(t.toJson()).then(function(t){return new Hs.SafeboxResponse(t)}).catch(function(t){throw t})}},{key:"securityProfiles",value:function(t){return this.jsonClient.securityProfiles(t).then(function(t){return t.security_profiles.map(function(t){return new Hs.SecurityProfile(t)})})}},{key:"enterpriseSettings",value:function(){return this.jsonClient.enterpriseSettings().then(function(t){return new Hs.EnterpriseSettings(t)})}}],[{key:"getUserToken",value:function(t,e,n,r,o){var i=(arguments.length>5&&void 0!==arguments[5]?arguments[5]:"sendsecure-js",arguments[6]),u=arguments[7],a=i+"/services/"+t+"/portal/host";return qs(a,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new mf(1,"unexpected server response format");return e}throw new gf(t.status,t.statusText)}).then(function(i){var a=i+"api/user_token",c=new Ls;return c.append("permalink",t),c.append("username",e),c.append("password",n),u&&c.append("otp",u),c.append("application_type","sendsecure-js"),c.append("device_id",r),c.append("device_name",o),qs(a,{method:"POST",body:c}).then(function(t){var e=t.json();if(!e)throw new gf(t.status,t.statusText);return e}).then(function(t){if(t.result)return t.token;throw new gf(t.code,t.message)})}).catch(function(t){if(t instanceof gf)throw t;throw new gf(t.code,t.message)})}}]),t}(),Xf={};return Xf.JsonClient=jf,Xf.Client=Qf,Xf.Helpers=Hs,Xf}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVJlZHVjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRWFjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hdGNoRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1BhdGguanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZWR1Y2UuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JlZHVjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTb21lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUV2ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUV2ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ldmVyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUZpbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmluZEluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvSW50ZWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmluZEluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwiLi4vc3JjL21vZHVsZXMvSGVscGVycy9CYXNlSGVscGVyLmpzIiwiLi4vc3JjL21vZHVsZXMvSGVscGVycy9TZWN1cml0eVByb2ZpbGUuanMiLCIuLi9zcmMvbW9kdWxlcy9IZWxwZXJzL0V4dGVuc2lvbkZpbHRlci5qcyIsIi4uL3NyYy9tb2R1bGVzL0hlbHBlcnMvRW50ZXJwcmlzZVNldHRpbmdzLmpzIiwiLi4vc3JjL21vZHVsZXMvSGVscGVycy9Db250YWN0TWV0aG9kLmpzIiwiLi4vc3JjL21vZHVsZXMvVXRpbHMvcGxhdGZvcm0uanMiLCIuLi9zcmMvbW9kdWxlcy9IZWxwZXJzL0F0dGFjaG1lbnQuanMiLCIuLi9zcmMvbW9kdWxlcy9IZWxwZXJzL1NhZmVib3guanMiLCIuLi9zcmMvbW9kdWxlcy9IZWxwZXJzL1JlY2lwaWVudC5qcyIsIi4uL3NyYy9tb2R1bGVzL0hlbHBlcnMvU2FmZWJveFJlc3BvbnNlLmpzIiwiLi4vc3JjL21vZHVsZXMvSGVscGVycy9IZWxwZXJzLmpzIiwiLi4vc3JjL21vZHVsZXMvc2VuZFNlY3VyZUV4Y2VwdGlvbi5qcyIsIi4uL3NyYy9tb2R1bGVzL0pzb25DbGllbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmQuanMiLCIuLi9zcmMvbW9kdWxlcy9DbGllbnQuanMiLCIuLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VGb3I7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICB2YWx1ZSA9IE9iamVjdCh2YWx1ZSk7XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gdmFsdWUpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gYXJyYXlUYWcsXG4gICAgICBvdGhUYWcgPSBhcnJheVRhZztcblxuICBpZiAoIW9iaklzQXJyKSB7XG4gICAgb2JqVGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIH1cbiAgaWYgKCFvdGhJc0Fycikge1xuICAgIG90aFRhZyA9IGdldFRhZyhvdGhlcik7XG4gICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG4gIH1cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpLFxuICAgIGdldCA9IHJlcXVpcmUoJy4vZ2V0JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVkdWNlO1xuIiwidmFyIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVJlZHVjZSA9IHJlcXVpcmUoJy4vX2Jhc2VSZWR1Y2UnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAqIGFuZCBgc29ydEJ5YFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICogICByZXR1cm4gc3VtICsgbjtcbiAqIH0sIDApO1xuICogLy8gPT4gM1xuICpcbiAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAqICAgcmV0dXJuIHJlc3VsdDtcbiAqIH0sIHt9KTtcbiAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVkdWNlO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQ7XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgcmV0dXJuICFyZXN1bHQ7XG4gIH0pO1xuICByZXR1cm4gISFyZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIiwidmFyIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VTb21lID0gcmVxdWlyZSgnLi9fYmFzZVNvbWUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb21lO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RXZlcnk7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgXG4gKi9cbmZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUV2ZXJ5O1xuIiwidmFyIGFycmF5RXZlcnkgPSByZXF1aXJlKCcuL19hcnJheUV2ZXJ5JyksXG4gICAgYmFzZUV2ZXJ5ID0gcmVxdWlyZSgnLi9fYmFzZUV2ZXJ5JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlcnk7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRmluZDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaW5kSW5kZXg7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9GaW5pdGU7XG4iLCJ2YXIgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiAxXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kSW5kZXg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVMZWFkaW5nRG90ID0gL15cXC4vLFxuICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwiaW1wb3J0IF9pc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdsb2Rhc2gvaXNBcnJheSdcclxuaW1wb3J0IF9yZWR1Y2UgZnJvbSAnbG9kYXNoL3JlZHVjZSdcclxuaW1wb3J0IF9tYXAgZnJvbSAnbG9kYXNoL21hcCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VIZWxwZXIge1xyXG4gIHVuZGVyc2NvcmlmeUtleXMoKXtcclxuICAgIGNvbnN0IHVuZGVyc2NvcmlmeSA9IChzKSA9PiBzLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24obSl7cmV0dXJuIGBfJHttLnRvTG93ZXJDYXNlKCl9YDt9KTtcclxuICAgIGxldCByZXN1bHQgPSBfcmVkdWNlKHRoaXMsIChyZXMsIHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgcmVzW3VuZGVyc2NvcmlmeShrZXkpXSA9IF9pc0FycmF5KHZhbHVlKSA/IF9tYXAodmFsdWUsIChlKSA9PiB7IHJldHVybiBlLnVuZGVyc2NvcmlmeUtleXMoKSB9ICkgOiB2YWx1ZTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0sIHt9KVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJhc2VIZWxwZXIgZnJvbSAnLi9CYXNlSGVscGVyLmpzJ1xyXG5pbXBvcnQgX21hcCBmcm9tICdsb2Rhc2gvbWFwJ1xyXG5pbXBvcnQgX3JlZHVjZSBmcm9tICdsb2Rhc2gvcmVkdWNlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdXJpdHlQcm9maWxlIGV4dGVuZHMgQmFzZUhlbHBlciB7XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdmFyIGNhbWVsQ2FzaWZ5ID0gKHMpID0+IHMucmVwbGFjZSgvKFxcX1xcdykvZywgZnVuY3Rpb24obSl7cmV0dXJuIG1bMV0udG9VcHBlckNhc2UoKTt9KTtcclxuICAgIF9tYXAob2JqZWN0LCAodmFsdWUsIGtleSkgPT4gdGhpc1tjYW1lbENhc2lmeShrZXkpXSA9IHZhbHVlICk7XHJcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEJhc2VIZWxwZXIgZnJvbSAnLi9CYXNlSGVscGVyLmpzJ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRlbnNpb25GaWx0ZXIgZXh0ZW5kcyBCYXNlSGVscGVyIHtcclxuICBjb25zdHJ1Y3RvcihvYmplY3QpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB2YXIgcHJvcGVydHlPck51bGwgPSAocykgPT4gKG9iamVjdCAmJiBzIGluIG9iamVjdCkgPyBvYmplY3Rbc10gOiBudWxsO1xyXG4gICAgdGhpcy5tb2RlID0gcHJvcGVydHlPck51bGwoJ21vZGUnKTtcclxuICAgIHRoaXMubGlzdCA9IHByb3BlcnR5T3JOdWxsKCdsaXN0Jyk7XHJcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IF9tYXAgZnJvbSAnbG9kYXNoL21hcCc7XHJcbmltcG9ydCBCYXNlSGVscGVyIGZyb20gJy4vQmFzZUhlbHBlci5qcydcclxuaW1wb3J0IEV4dGVuc2lvbkZpbHRlciBmcm9tICcuL0V4dGVuc2lvbkZpbHRlci5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudGVycHJpc2VTZXR0aW5ncyBleHRlbmRzIEJhc2VIZWxwZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihvYmplY3Qpe1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHZhciBjYW1lbENhc2lmeSA9IChzKSA9PiBzLnJlcGxhY2UoLyhcXF9cXHcpL2csIGZ1bmN0aW9uKG0pe3JldHVybiBtWzFdLnRvVXBwZXJDYXNlKCk7fSk7XHJcbiAgICBfbWFwKG9iamVjdCwgKHZhbHVlLCBrZXkpID0+IHRoaXNbY2FtZWxDYXNpZnkoa2V5KV0gPSB2YWx1ZSApXHJcbiAgICB0aGlzLmV4dGVuc2lvbkZpbHRlciA9IG5ldyBFeHRlbnNpb25GaWx0ZXIodGhpcy5leHRlbnNpb25GaWx0ZXIpO1xyXG4gICAgT2JqZWN0LnNlYWwodGhpcyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBfaXNPYmplY3QgZnJvbSAnbG9kYXNoL2lzT2JqZWN0J1xyXG5pbXBvcnQgX3JlZHVjZSBmcm9tICdsb2Rhc2gvcmVkdWNlJ1xyXG5pbXBvcnQgQmFzZUhlbHBlciBmcm9tICcuL0Jhc2VIZWxwZXIuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250YWN0TWV0aG9kIGV4dGVuZHMgQmFzZUhlbHBlciB7XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdmFyIHByb3BlcnR5T3JOdWxsID0gKHMpID0+IChvYmplY3QgJiYgcyBpbiBvYmplY3QpID8gb2JqZWN0W3NdIDogbnVsbDtcclxuICAgIHRoaXMuZGVzdGluYXRpb25UeXBlID0gcHJvcGVydHlPck51bGwoJ2Rlc3RpbmF0aW9uVHlwZScpO1xyXG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IHByb3BlcnR5T3JOdWxsKCdkZXN0aW5hdGlvbicpO1xyXG4gIH1cclxufVxyXG4iLCJ2YXIgZmV0Y2ggPSBudWxsO1xyXG52YXIgZnMgPSBudWxsO1xyXG52YXIgcGF0aCA9IG51bGw7XHJcbnZhciBsb29rdXAgPSBudWxsO1xyXG52YXIgaXNOb2RlID0gZmFsc2U7XHJcbnZhciBGb3JtRGF0YSA9IG51bGw7XHJcblxyXG5pZiAoKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykgJiYgKHByb2Nlc3MucmVsZWFzZS5uYW1lID09PSAnbm9kZScpKXtcclxuICBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTtcclxuICBmcyA9IHJlcXVpcmUgKCdmcycpO1xyXG4gIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbiAgbG9va3VwID0gcmVxdWlyZSgnbWltZS10eXBlcycpLmxvb2t1cDtcclxuICBGb3JtRGF0YSA9IHJlcXVpcmUoJ2Zvcm0tZGF0YScpO1xyXG4gIGlzTm9kZSA9IHRydWU7XHJcblxyXG59IGVsc2Uge1xyXG4gIGZldGNoID0gd2luZG93LmZldGNoO1xyXG4gIEZvcm1EYXRhID0gd2luZG93LkZvcm1EYXRhO1xyXG59XHJcblxyXG5leHBvcnQgeyBmZXRjaCB9IDtcclxuZXhwb3J0IHsgZnMgfSA7XHJcbmV4cG9ydCB7IGxvb2t1cCB9IDtcclxuZXhwb3J0IHsgaXNOb2RlIH0gO1xyXG5leHBvcnQgeyBwYXRoIH0gO1xyXG5leHBvcnQgeyBGb3JtRGF0YSB9IDtcclxuIiwiaW1wb3J0IEJhc2VIZWxwZXIgZnJvbSAnLi9CYXNlSGVscGVyLmpzJ1xyXG5cclxuaW1wb3J0IHsgaXNOb2RlLCBmcywgbG9va3VwLCBwYXRoIH0gZnJvbSAnLi4vVXRpbHMvcGxhdGZvcm0uanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRhY2htZW50IGV4dGVuZHMgQmFzZUhlbHBlciB7XHJcbiAgLyoqXHJcbiAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXR0YWNobWVudFxyXG4gICogQHNpbmNlIDAuMS4wXHJcbiAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8RmlsZX0gSW4gTm9kZUpTOiBlaXRoZXIgdGhlIHBhdGggdG8gYSBmaWxlIG9uIGRpc2sgb3IgYW4gb2JqZWN0ICwgaW4gYnJvd3NlciBhIEZpbGUgb2JqZWN0IChjZi4gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL0ZpbGUpLlxyXG4gICogQHJldHVybnMge0F0dGFjaG1lbnR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgQXR0YWNobWVudCxcclxuICAqICBlbHNlIGBmYWxzZWAuXHJcbiAgKiBAZXhhbXBsZVxyXG4gICpcclxuICAqIC8vIEluIGJyb3dzZXJcclxuICAqIHZhciBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucHV0XCIpO1xyXG4gICogaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oKXtcclxuICAqICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbMF07XHJcbiAgKiAgdmFyIGF0dGFjaG1lbnRzID0gbmV3IEF0dGFjaG1lbnQoZmlsZSk7XHJcbiAgKiB9KTtcclxuICAqXHJcbiAgKiAvL0luIE5vZGVKU1xyXG4gICogdmFyIGF0dGFjaG1lbnQgPSBuZXcgQXR0YWNobWVudHMoJy90bXAvZm9vYmFyLnR4dCcpO1xyXG4gICogb3IgIHZhciBhdHRhY2htZW50ID0gbmV3IEF0YXRjaG1lbnQoe2ZpbGVuYW1lOiAnZm9vYmFyLnR4dCcsIHN0cmVhbTogZnMucmVhZEZpbGVTeW5jKCcvdG1wL2Zvb2Jhci50eHQnKSwgY29udGVudFR5cGU6ICd0ZXh0L3BsYWluJ30pO1xyXG4gICovXHJcbiAgY29uc3RydWN0b3IoYXJnKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgaWYgKGlzTm9kZSl7XHJcbiAgICAgIGlmICh0eXBlb2YgYXJnID09ICdzdHJpbmcnKXtcclxuICAgICAgICB0aGlzLmZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZShhcmcpO1xyXG4gICAgICAgIHRoaXMuY29udGVudFR5cGUgPSBsb29rdXAoYXJnKTtcclxuICAgICAgICB0aGlzLnN0cmVhbSA9IGZzLnJlYWRGaWxlU3luYyhhcmcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmKF9hbGwoWydmaWxlbmFtZScsICdzdHJlYW0nLCAnY29udGVudFR5cGUnXSksIGUgPT4gZSBpbiBhcmcpe1xyXG4gICAgICAgICAgdGhpcy5maWxlbmFtZSA9IGFyZy5maWxlbmFtZTtcclxuICAgICAgICAgIHRoaXMuY29udGVudFR5cGUgPSBhcmcuY29udGVudFR5cGU7XHJcbiAgICAgICAgICB0aGlzLnN0cmVhbSA9IGFyZy5zdHJlYW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgLy8gVE9ETyBleGNlcHRpb24/XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmZpbGUgPSBhcmc7XHJcbiAgICB9XHJcbiAgICB0aGlzLmd1aWQgPSBudWxsXHJcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IF9yZWR1Y2UgZnJvbSAnbG9kYXNoL3JlZHVjZSdcclxuaW1wb3J0IF9tYXAgZnJvbSAnbG9kYXNoL21hcCdcclxuaW1wb3J0IEJhc2VIZWxwZXIgZnJvbSAnLi9CYXNlSGVscGVyLmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2FmZWJveCBleHRlbmRzIEJhc2VIZWxwZXIge1xyXG4gIGNvbnN0cnVjdG9yICh1c2VyRW1haWwpe1xyXG4gICAgc3VwZXIoKTtcclxuICAgIF9tYXAoIFtcclxuICAgICAgJ2d1aWQnLFxyXG4gICAgICAncmVjaXBpZW50cycsXHJcbiAgICAgICdzdWJqZWN0JyxcclxuICAgICAgJ2F0dGFjaG1lbnRzJyxcclxuICAgICAgJ3NlY3VyaXR5UHJvZmlsZScsXHJcbiAgICAgICdtZXNzYWdlJyxcclxuICAgICAgJ3JlcGx5RW5hYmxlZCcsXHJcbiAgICAgICd1cGxvYWRVcmwnLFxyXG4gICAgICAncHVibGljRW5jcnlwdGlvbktleScsXHJcbiAgICAgICdub3RpZmljYXRpb25MYW5ndWFnZScsXHJcbiAgICBdLCAodikgPT4gdGhpc1t2XSA9IG51bGwpO1xyXG4gICAgdGhpcy51c2VyRW1haWwgPSB1c2VyRW1haWw7XHJcbiAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnModGhpcyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgdG9Kc29uKCl7XHJcbiAgICBsZXQgcHJvZmlsZSA9IHRoaXMuc2VjdXJpdHlQcm9maWxlO1xyXG4gICAgbGV0IGF0dGFjaG1lbnRzID0gdGhpcy5hdHRhY2htZW50cztcclxuICAgIGRlbGV0ZSB0aGlzLnNlY3VyaXR5UHJvZmlsZTtcclxuICAgIGRlbGV0ZSB0aGlzLmF0dGFjaG1lbnRzO1xyXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMudW5kZXJzY29yaWZ5S2V5cygpO1xyXG4gICAgcmVzdWx0LnNlY3VyaXR5X3Byb2ZpbGVfaWQgPSBwcm9maWxlLmlkO1xyXG4gICAgcmVzdWx0LmRvY3VtZW50X2lkcyA9IF9yZWR1Y2UoYXR0YWNobWVudHMsIChyZXN1bHQsIGF0dCkgPT4ge1xyXG4gICAgICByZXN1bHQucHVzaChhdHQuZ3VpZClcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sIFtdKVxyXG4gICAgcmVzdWx0Lmdyb3VwX3JlcGxpZXMgPSBwcm9maWxlLmdyb3VwUmVwbGllcy52YWx1ZTtcclxuICAgIHJlc3VsdC5leHBpcmF0aW9uX3ZhbHVlID0gcHJvZmlsZS5leHBpcmF0aW9uVmFsdWUudmFsdWU7XHJcbiAgICByZXN1bHQuZXhwaXJhdGlvbl91bml0ID0gcHJvZmlsZS5leHBpcmF0aW9uVW5pdC52YWx1ZTtcclxuICAgIHJlc3VsdC5yZXRlbnRpb25fcGVyaW9kX3R5cGUgPSBwcm9maWxlLnJldGVudGlvblBlcmlvZFR5cGUudmFsdWU7XHJcbiAgICByZXN1bHQucmV0ZW50aW9uX3BlcmlvZF92YWx1ZSA9IHByb2ZpbGUucmV0ZW50aW9uUGVyaW9kVmFsdWUudmFsdWU7XHJcbiAgICByZXN1bHQucmV0ZW50aW9uX3BlcmlvZF91bml0ID0gcHJvZmlsZS5yZXRlbnRpb25QZXJpb2RVbml0LnZhbHVlO1xyXG4gICAgcmVzdWx0LmVuY3J5cHRfbWVzc2FnZSA9IHByb2ZpbGUuZW5jcnlwdE1lc3NhZ2UudmFsdWU7XHJcbiAgICByZXN1bHQuZG91YmxlX2VuY3J5cHRpb24gPSBwcm9maWxlLmRvdWJsZUVuY3J5cHRpb24udmFsdWU7XHJcbiAgICByZXN1bHQucmVwbHlfZW5hYmxlZCA9IHByb2ZpbGUucmVwbHlFbmFibGVkLnZhbHVlO1xyXG4gICAgcmVzdWx0Lm5vdGlmaWNhdGlvbl9sYW5ndWFnZSA9ICdlbidcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7IHNhZmVib3g6IHJlc3VsdCB9KVxyXG4gIH1cclxuXHJcblxyXG5cclxufVxyXG4iLCJpbXBvcnQgQmFzZUhlbHBlciBmcm9tICcuL0Jhc2VIZWxwZXIuanMnXHJcbmltcG9ydCBDb250YWN0TWV0aG9kIGZyb20gJy4vQ29udGFjdE1ldGhvZC5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2lwaWVudCBleHRlbmRzIEJhc2VIZWxwZXJ7XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0KXtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB2YXIgcHJvcGVydHlPck51bGwgPSAocykgPT4gKG9iamVjdCAmJiBzIGluIG9iamVjdCkgPyBvYmplY3Rbc10gOiBudWxsO1xyXG4gICAgdGhpcy5lbWFpbCA9IHByb3BlcnR5T3JOdWxsKCdlbWFpbCcpO1xyXG4gICAgdGhpcy5maXJzdE5hbWUgPSBwcm9wZXJ0eU9yTnVsbCgnZmlyc3RfbmFtZScpO1xyXG4gICAgdGhpcy5sYXN0TmFtZSA9IHByb3BlcnR5T3JOdWxsKCdsYXN0X25hbWUnKTtcclxuICAgIHRoaXMuY29tcGFueU5hbWUgPSBwcm9wZXJ0eU9yTnVsbCgnY29tcGFueV9uYW1lJyk7XHJcbiAgICB0aGlzLmNvbnRhY3RNZXRob2RzID0gbnVsbDtcclxuICAgIGlmIChvYmplY3QgJiYgJ2NvbnRhY3RfbWV0aG9kcycgaW4gb2JqZWN0KXtcclxuICAgICAgdGhpcy5jb250YWN0TWV0aG9kcyA9IG9iamVjdC5jb250YWN0X21ldGhvZHMubWFwKChjb250YWN0TWV0aG9kKSA9PiB7XHJcbiAgICAgICAgbmV3IENvbnRhY3RNZXRob2QoY29udGFjdE1ldGhvZClcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIE9iamVjdC5zZWFsKHRoaXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQmFzZUhlbHBlciBmcm9tICcuL0Jhc2VIZWxwZXIuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTYWZlYm94UmVzcG9uc2UgZXh0ZW5kcyBCYXNlSGVscGVyIHtcclxuICBjb25zdHJ1Y3RvcihvYmplY3QpIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG4gICAgdmFyIHByb3BlcnR5T3JOdWxsID0gKHMpID0+IChvYmplY3QgJiYgcyBpbiBvYmplY3QpID8gb2JqZWN0W3NdIDogbnVsbDtcclxuICAgIHRoaXMucHJldmlld1VybCA9IHByb3BlcnR5T3JOdWxsKCdwcmV2aWV3X3VybCcpO1xyXG4gICAgdGhpcy5lbmNyeXB0aW9uS2V5ID0gcHJvcGVydHlPck51bGwoJ2VuY3J5cHRpb25LZXknKTtcclxuICAgIHRoaXMuZ3VpZCA9IHByb3BlcnR5T3JOdWxsKCdndWlkJyk7XHJcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFNlY3VyaXR5UHJvZmlsZSBmcm9tICcuL1NlY3VyaXR5UHJvZmlsZS5qcydcclxuaW1wb3J0IEVudGVycHJpc2VTZXR0aW5ncyBmcm9tICcuL0VudGVycHJpc2VTZXR0aW5ncy5qcydcclxuaW1wb3J0IEV4dGVuc2lvbkZpbHRlciBmcm9tICcuL0V4dGVuc2lvbkZpbHRlci5qcydcclxuaW1wb3J0IENvbnRhY3RNZXRob2QgZnJvbSAnLi9Db250YWN0TWV0aG9kLmpzJ1xyXG5pbXBvcnQgQXR0YWNobWVudCBmcm9tICcuL0F0dGFjaG1lbnQuanMnXHJcbmltcG9ydCBTYWZlYm94IGZyb20gJy4vU2FmZWJveC5qcydcclxuaW1wb3J0IFJlY2lwaWVudCBmcm9tICcuL1JlY2lwaWVudC5qcydcclxuaW1wb3J0IFNhZmVib3hSZXNwb25zZSBmcm9tICcuL1NhZmVib3hSZXNwb25zZS5qcydcclxuXHJcbnZhciBIZWxwZXJzID0ge307XHJcblxyXG5IZWxwZXJzLlNlY3VyaXR5UHJvZmlsZSA9IFNlY3VyaXR5UHJvZmlsZTtcclxuSGVscGVycy5FbnRlcnByaXNlU2V0dGluZ3MgPSBFbnRlcnByaXNlU2V0dGluZ3M7XHJcbkhlbHBlcnMuRXh0ZW5zaW9uRmlsdGVyID0gRXh0ZW5zaW9uRmlsdGVyO1xyXG5IZWxwZXJzLkNvbnRhY3RNZXRob2QgPSBDb250YWN0TWV0aG9kO1xyXG5IZWxwZXJzLkF0dGFjaG1lbnQgPSBBdHRhY2htZW50O1xyXG5IZWxwZXJzLlJlY2lwaWVudCA9IFJlY2lwaWVudDtcclxuSGVscGVycy5TYWZlYm94ID0gU2FmZWJveDtcclxuSGVscGVycy5TYWZlYm94UmVzcG9uc2UgPSBTYWZlYm94UmVzcG9uc2U7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWxwZXJzO1xyXG4iLCJleHBvcnQgY2xhc3MgU2VuZFNlY3VyZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcclxuICBjb25zdHJ1Y3RvciAoY29kZSwgbWVzc2FnZSwgcmVzcG9uc2VDb250ZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICB0aGlzLnJlc3BvbnNlQ29udGVudCA9IHJlc3BvbnNlQ29udGVudDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFeGNlcHRpb24gZXh0ZW5kcyBTZW5kU2VjdXJlRXhjZXB0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKXtcclxuICAgIHN1cGVyIChjb2RlLCBtZXNzYWdlKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBmZXRjaCwgZnMsIGxvb2t1cCwgaXNOb2RlLCBwYXRoLCBGb3JtRGF0YSB9IGZyb20gJy4vVXRpbHMvcGxhdGZvcm0uanMnXHJcbmltcG9ydCBfYW55IGZyb20gJ2xvZGFzaC9zb21lLmpzJ1xyXG5pbXBvcnQgX2FsbCBmcm9tICdsb2Rhc2gvZXZlcnkuanMnXHJcbmltcG9ydCAqIGFzIEV4Y2VwdGlvbiBmcm9tICcuL3NlbmRTZWN1cmVFeGNlcHRpb24uanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKc29uQ2xpZW50IHtcclxuICBjb25zdHJ1Y3RvcihhcGlUb2tlbiwgZW50ZXJwcmlzZUFjY291bnQsIGVuZHBvaW50ID0gJ2h0dHBzOi8vcG9ydGFsLnhtZWRpdXMuY29tJywgbG9jYWxlID0gJ2VuJykge1xyXG4gICAgdGhpcy5hcGlUb2tlbiA9IGFwaVRva2VuO1xyXG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xyXG4gICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XHJcbiAgICB0aGlzLmVudGVycHJpc2VBY2NvdW50ID0gZW50ZXJwcmlzZUFjY291bnQ7XHJcbiAgfVxyXG5cclxuICBfZ2V0U2VuZFNlY3VyZUVuZHBvaW50KGVudGVycHJpc2VBY2NvdW50LCBlbmRwb2ludCl7XHJcbiAgICBjb25zdCB1cmwgID0gYCR7ZW5kcG9pbnR9L3NlcnZpY2VzLyR7ZW50ZXJwcmlzZUFjY291bnR9L3NlbmRzZWN1cmUvc2VydmVyL3VybGBcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcclxuICAgIFx0bWV0aG9kOiAnZ2V0J1xyXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgaWYocmVzcG9uc2Uub2spIHtcclxuICAgICAgICBsZXQgdGV4dCA9IHJlc3BvbnNlLnRleHQoKVxyXG4gICAgICAgIGlmICh0ZXh0ID09PSAnJyl7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uLlVuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUV4Y2VwdGlvbigxLCAndW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UgZm9ybWF0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24uU2VuZFNlY3VyZUV4Y2VwdGlvbihyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgX21ha2VSZXF1ZXN0KCBzdWZmaXhVcmwsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0geyBoZWFkZXJzOiB7ICAnQXV0aG9yaXphdGlvbi1Ub2tlbic6IHRoaXMuYXBpVG9rZW4gfSwgbWV0aG9kOiAnZ2V0JyB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ2V0U2VuZFNlY3VyZUVuZHBvaW50KHRoaXMuZW50ZXJwcmlzZUFjY291bnQsIHRoaXMuZW5kcG9pbnQpXHJcbiAgICAgIC50aGVuKChzZW5kc2VjdXJlRW5kcG9pbnQpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgJHtzZW5kc2VjdXJlRW5kcG9pbnR9JHtzdWZmaXhVcmx9YFxyXG4gICAgICAgIHJldHVybiBmZXRjaCh1cmwsIHJlcXVlc3QpXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5vayl7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uLlNlbmRTZWN1cmVFeGNlcHRpb24ocmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0LCByZXN1bHQpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuXHJcbiAgbmV3U2FmZWJveCh1c2VyRW1haWwpe1xyXG4gICAgY29uc3Qgc3VmZml4ID0gYGFwaS92Mi9zYWZlYm94ZXMvbmV3P3VzZXJfZW1haWw9JHt1c2VyRW1haWx9JmxvY2FsZT0ke3RoaXMubG9jYWxlfWA7XHJcbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qoc3VmZml4KVxyXG4gIH1cclxuXHJcbiAgc2VjdXJpdHlQcm9maWxlcyh1c2VyRW1haWwpIHtcclxuICAgIGNvbnN0IHN1ZmZpeCA9IGBhcGkvdjIvZW50ZXJwcmlzZXMvJHt0aGlzLmVudGVycHJpc2VBY2NvdW50fS9zZWN1cml0eV9wcm9maWxlcz91c2VyX2VtYWlsPSR7dXNlckVtYWlsfSZsb2NhbGU9JHt0aGlzLmxvY2FsZX1gO1xyXG4gICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KHN1ZmZpeClcclxuICB9XHJcblxyXG4gIGVudGVycHJpc2VTZXR0aW5ncyh1c2VyRW1haWwpIHtcclxuICAgIGNvbnN0IHN1ZmZpeCA9IGBhcGkvdjIvZW50ZXJwcmlzZXMvJHt0aGlzLmVudGVycHJpc2VBY2NvdW50fS9zZXR0aW5ncz9sb2NhbGU9JHt0aGlzLmxvY2FsZX1gO1xyXG4gICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KHN1ZmZpeClcclxuICB9XHJcblxyXG4gIHVwbG9hZEZpbGUodXBsb2FkVXJsLCBvYmplY3Qpe1xyXG4gICAgaWYgKCFfYW55KFsnZmlsZScsICdmaWxlUGF0aCcsICdmaWxlU3RyZWFtJ10sIChlbHQpID0+IGVsdCBpbiBvYmplY3QpKXtcclxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbi5TZW5kU2VjdXJlRXhjZXB0aW9uKCcwJywgXCJ1cGxvYWQgRmlsZSBhcmd1bWVudHMgZXJyb3JcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaXNOb2RlKSB7XHJcbiAgICAgICAgaWYgKCdmaWxlUGF0aCcgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhvYmplY3QuZmlsZVBhdGgpKXtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMob2JqZWN0LmZpbGVQYXRoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gb2JqZWN0LmNvbnRlbnRUeXBlIHx8IGxvb2t1cChvYmplY3QuZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBvYmplY3QuZmlsZW5hbWUgfHwgcGF0aC5iYXNlbmFtZShvYmplY3QuZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXBsb2FkRmlsZU5vZGUodXBsb2FkVXJsLCBkYXRhLCBjb250ZW50VHlwZSwgZmlsZW5hbWUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbi5TZW5kU2VjdXJlRXhjZXB0aW9uKCcwJywgYCR7b2JqZWN0LmZpbGVQYXRofSBkb2VzIG5vdCBleGlzdGApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoX2FsbChbJ2ZpbGVTdHJlYW0nLCAnY29udGVudFR5cGUnLCAnZmlsZW5hbWUnXSwgKGVsdCkgPT4gZWx0IGluIG9iamVjdCkpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXBsb2FkRmlsZU5vZGUodXBsb2FkVXJsLCBvYmplY3QuZmlsZVN0cmVhbSwgb2JqZWN0LmNvbnRlbnRUeXBlLCBvYmplY3QuZmlsZW5hbWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoJ2ZpbGUnIGluIG9iamVjdCAmJiBvYmplY3QuZmlsZSBpbnN0YW5jZW9mIEZpbGUpe1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3VwbG9hZEZpbGVCcm93c2VyKHVwbG9hZFVybCwgb2JqZWN0LmZpbGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uLlNlbmRTZWN1cmVFeGNlcHRpb24oJzAnLCAnXCJmaWxlXCIgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGluc3RhbmNlIG9mIEZpbGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIF91cGxvYWRGaWxlQnJvd3Nlcih1cGxvYWRVcmwsIGZpbGUpIHtcclxuICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICBkYXRhLmFwcGVuZCggJ2ZpbGUnLCBmaWxlLCBmaWxlLm5hbWUgICk7XHJcblxyXG4gICAgcmV0dXJuIGZldGNoKHVwbG9hZFVybCwge1xyXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgYm9keTogZGF0YSxcclxuICAgIH0pLnRoZW4gKHJlc3BvbnNlID0+IHtcclxuICAgICAgaWYgKHJlc3BvbnNlLm9rKXtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgIH0gIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24uU2VuZFNlY3VyZUV4Y2VwdGlvbihyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgX3VwbG9hZEZpbGVOb2RlKHVwbG9hZFVybCwgZmlsZVN0cmVhbSwgY29udGVudFR5cGUsIGZpbGVuYW1lKXtcclxuICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICBkYXRhLmFwcGVuZCggJ2ZpbGUnLCBmaWxlU3RyZWFtLCBmaWxlbmFtZSAgKTtcclxuXHJcbiAgICByZXR1cm4gZmV0Y2godXBsb2FkVXJsLCB7XHJcbiAgICBcdG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgXHRib2R5OiBkYXRhICxcclxuICAgIH0pLnRoZW4gKHJlc3BvbnNlID0+IHtcclxuICAgICAgaWYgKHJlc3BvbnNlLm9rKXtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgIH0gIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24uU2VuZFNlY3VyZUV4Y2VwdGlvbihyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY29tbWl0U2FmZWJveChzYWZlYm94SnNvbil7XHJcbiAgICBjb25zdCBzdWZmaXggPSBgYXBpL3YyL3NhZmVib3hlcz9sb2NhbGU9JHt0aGlzLmxvY2FsZX1gO1xyXG4gICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KFxyXG4gICAgICBzdWZmaXgsXHJcbiAgICAgIHtcclxuICAgICAgICBoZWFkZXJzOiB7J0F1dGhvcml6YXRpb24tVG9rZW4nOiB0aGlzLmFwaVRva2VuLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcclxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICBib2R5OiBzYWZlYm94SnNvbixcclxuICAgICAgfVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbn1cclxuIiwidmFyIGNyZWF0ZUZpbmQgPSByZXF1aXJlKCcuL19jcmVhdGVGaW5kJyksXG4gICAgZmluZEluZGV4ID0gcmVxdWlyZSgnLi9maW5kSW5kZXgnKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gKi9cbnZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmQ7XG4iLCJpbXBvcnQgX2ZpbmQgZnJvbSAnbG9kYXNoL2ZpbmQnXHJcbmltcG9ydCBfbWFwIGZyb20gJ2xvZGFzaC9tYXAnXHJcbmltcG9ydCBKc29uQ2xpZW50IGZyb20gJy4vSnNvbkNsaWVudC5qcydcclxuaW1wb3J0IEhlbHBlcnMgZnJvbSAnLi9IZWxwZXJzL0hlbHBlcnMuanMnXHJcbmltcG9ydCB7IGZldGNoLCBGb3JtRGF0YSwgaXNOb2RlIH0gZnJvbSAnLi9VdGlscy9wbGF0Zm9ybS5qcydcclxuaW1wb3J0ICogYXMgRXhjZXB0aW9uIGZyb20gJy4vc2VuZFNlY3VyZUV4Y2VwdGlvbi5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWVudCB7XHJcbiAgY29uc3RydWN0b3IoYXBpVG9rZW4sIGVudGVycHJpc2VBY2NvdW50LCBlbmRwb2ludCA9IFwiaHR0cHM6Ly9wb3J0YWwueG1lZGl1cy5jb21cIiwgbG9jYWxlID0gXCJlblwiKXtcclxuICAgIHRoaXMuYXBpVG9rZW4gPSBhcGlUb2tlbjtcclxuICAgIHRoaXMuZW50ZXJwcmlzZUFjY291bnQgPSBlbnRlcnByaXNlQWNjb3VudDtcclxuICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcclxuICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xyXG4gICAgdGhpcy5qc29uQ2xpZW50ID0gbmV3IEpzb25DbGllbnQoYXBpVG9rZW4sIGVudGVycHJpc2VBY2NvdW50LCBlbmRwb2ludCwgbG9jYWxlKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogR2V0cyBhbiBBUEkgVG9rZW4gZm9yIGEgc3BlY2lmaWMgdXNlciB3aXRoaW4gYSBTZW5kU2VjdXJlIGVudGVycHJpc2UgYWNjb3VudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBlbnRlcnByaXNlQWNjb3VudFxyXG5cdCAqICAgICAgICAgICAgVGhlIFNlbmRTZWN1cmUgZW50ZXJwcmlzZSBhY2NvdW50XHJcblx0ICogQHBhcmFtIHVzZXJuYW1lXHJcblx0ICogICAgICAgICAgICBUaGUgdXNlcm5hbWUgb2YgYSBTZW5kU2VjdXJlIHVzZXIgb2YgdGhlIGN1cnJlbnQgZW50ZXJwcmlzZSBhY2NvdW50XHJcblx0ICogQHBhcmFtIHBhc3N3b3JkXHJcblx0ICogICAgICAgICAgICBUaGUgcGFzc3dvcmQgb2YgdGhpcyB1c2VyXHJcblx0ICogQHBhcmFtIGRldmljZUlkXHJcblx0ICogICAgICAgICAgICBUaGUgZGV2aWNlIElkIHRoYXQgaWRlbnRpZnkgdGhhdCB0b2tlblxyXG5cdCAqIEBwYXJhbSBkZXZpY2VOYW1lXHJcblx0ICogICAgICAgICAgICBUaGUgZGV2aWNlIE5hbWUgdGhhdCBpZGVudGlmeSB0aGF0IHRva2VuXHJcblx0ICogQHBhcmFtIGFwcGxpY2F0aW9uVHlwZVxyXG5cdCAqICAgICAgICAgICAgVGhlIGFwcGxpY2F0aW9uIHR5cGUgdGhhdCBpZGVudGlmeSB0aGF0IHRva2VuIChcIlNlbmRTZWN1cmUgSmF2YVwiIHdpbGwgYmUgdXNlZCBieSBkZWZhdWx0IGlmIGVtcHR5KVxyXG5cdCAqIEBwYXJhbSBlbmRwb2ludFxyXG5cdCAqICAgICAgICAgICAgVGhlIFVSTCB0byB0aGUgU2VuZFNlY3VyZSBzZXJ2aWNlIChcImh0dHBzOi8vcG9ydGFsLnhtZWRpdXMuY29tXCIgd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQgaWYgZW1wdHkpXHJcbiAgICogQHBhcmFtIG9uZVRpbWVQYXNzd29yZFxyXG4gICAqICAgICAgICAgICAgVGhlIG9uZS10aW1lIHBhc3N3b3JkIG9mIHRoaXMgdXNlciAoaWYgYW55KVxyXG5cdCAqIEByZXR1cm4gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgQVBJIFRva2VuIHRvIGJlIHVzZWQgZm9yIHRoZSBzcGVjaWZpZWQgdXNlclxyXG4gICAqICAgICAgICAgb3IgdGhhdCBpcyByZWplY3RlZCAgd2l0aCBhbiBpbnN0YW5jZSBvZiBTZW5kU2VjdXJlRXhjZXB0aW9uXHJcblx0ICovXHJcbiAgc3RhdGljIGdldFVzZXJUb2tlbihlbnRlcnByaXNlQWNjb3VudCwgdXNlcm5hbWUsIHBhc3N3b3JkLCBkZXZpY2VJZCwgZGV2aWNlTmFtZSwgYXBwbGljYXRpb25UeXBlID0gXCJzZW5kc2VjdXJlLWpzXCIsIGVuZHBvaW50LCBvbmVUaW1lUGFzc3dvcmQpe1xyXG4gICAgY29uc3QgdXJsICA9IGAke2VuZHBvaW50fS9zZXJ2aWNlcy8ke2VudGVycHJpc2VBY2NvdW50fS9wb3J0YWwvaG9zdGBcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcdG1ldGhvZDogJ2dldCcgfSlcclxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgaWYocmVzcG9uc2Uub2spIHtcclxuICAgICAgICBsZXQgdGV4dCA9IHJlc3BvbnNlLnRleHQoKVxyXG4gICAgICAgIGlmICh0ZXh0ID09PSAnJyl7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uLlVuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUV4Y2VwdGlvbigxLCAndW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UgZm9ybWF0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24uU2VuZFNlY3VyZUV4Y2VwdGlvbihyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLnRoZW4ocG9ydGFsX3VybCA9PiB7XHJcbiAgICAgIGNvbnN0IHVybCAgPSBgJHtwb3J0YWxfdXJsfWFwaS91c2VyX3Rva2VuYDtcclxuICAgICAgdmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZGF0YS5hcHBlbmQoICdwZXJtYWxpbmsnLCBlbnRlcnByaXNlQWNjb3VudCAgKTtcclxuICAgICAgZGF0YS5hcHBlbmQoICd1c2VybmFtZScsIHVzZXJuYW1lICk7XHJcbiAgICAgIGRhdGEuYXBwZW5kKCAncGFzc3dvcmQnLCBwYXNzd29yZCApO1xyXG4gICAgICBpZiAob25lVGltZVBhc3N3b3JkKSB7XHJcbiAgICAgICAgZGF0YS5hcHBlbmQoICdvdHAnLCBvbmVUaW1lUGFzc3dvcmQgKTtcclxuICAgICAgfVxyXG4gICAgICBkYXRhLmFwcGVuZCggJ2FwcGxpY2F0aW9uX3R5cGUnLCAnc2VuZHNlY3VyZS1qcycgICk7XHJcbiAgICAgIGRhdGEuYXBwZW5kKCAnZGV2aWNlX2lkJywgZGV2aWNlSWQgICk7XHJcbiAgICAgIGRhdGEuYXBwZW5kKCAnZGV2aWNlX25hbWUnLCBkZXZpY2VOYW1lICApO1xyXG5cclxuICAgICAgcmV0dXJuIGZldGNoKHVybCwge1x0bWV0aG9kOiAnUE9TVCcsXHRib2R5OiBkYXRhLCB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgbGV0IGpzb24gPSByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgaWYgKCFqc29uKXtcclxuICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24uU2VuZFNlY3VyZUV4Y2VwdGlvbihyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ganNvbjtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbil7XHJcbiAgICAgICAgaWYgKGpzb24ucmVzdWx0KXtcclxuICAgICAgICAgIHJldHVybiBqc29uLnRva2VuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyAgbmV3IEV4Y2VwdGlvbi5TZW5kU2VjdXJlRXhjZXB0aW9uKGpzb24uY29kZSwganNvbi5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEV4Y2VwdGlvbi5TZW5kU2VjdXJlRXhjZXB0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICB9XHJcbiAgICAgIHRocm93ICBuZXcgRXhjZXB0aW9uLlNlbmRTZWN1cmVFeGNlcHRpb24oZXJyLmNvZGUsIGVyci5tZXNzYWdlKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdWJtaXRTYWZlYm94KHNhZmVib3gpe1xyXG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZVNhZmVib3goc2FmZWJveClcclxuICAgICAgLnRoZW4oc2J4ID0+IHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgbGV0IHJlcXVlc3RzID0gX21hcChzYnguYXR0YWNobWVudHMsIChpdGVtKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRBdHRhY2htZW50KHNieCwgaXRlbSlcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVxdWVzdHMpLnRoZW4oYXR0YWNobWVudHMgPT4ge1xyXG4gICAgICAgICAgc2J4LmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XHJcbiAgICAgICAgICByZXR1cm4gc2J4O1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKHNieCA9PiB7XHJcbiAgICAgICAgaWYgKCFzYnguc2VjdXJpdHlQcm9maWxlKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRTZWN1cml0eVByb2ZpbGUoc2J4LnVzZXJFbWFpbClcclxuICAgICAgICAgICAgLnRoZW4oIGRlZmF1bHRTZWN1cml0eVByb2ZpbGUgPT4ge1xyXG4gICAgICAgICAgICAgIHNieC5zZWN1cml0eVByb2ZpbGUgPSBkZWZhdWx0U2VjdXJpdHlQcm9maWxlXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tbWl0U2FmZWJveChzYngpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29tbWl0U2FmZWJveChzYngpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2ggKGVycm9yID0+IHsgdGhyb3cgZXJyb3IgfSk7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplU2FmZWJveChzYWZlYm94KXtcclxuICAgIHJldHVybiB0aGlzLmpzb25DbGllbnQubmV3U2FmZWJveChzYWZlYm94LnVzZXJFbWFpbClcclxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICBzYWZlYm94Lmd1aWQgPSByZXN1bHQuZ3VpZDtcclxuICAgICAgICBzYWZlYm94LnB1YmxpY0VuY3J5cHRpb25LZXkgPSByZXN1bHQucHVibGljX2VuY3J5cHRpb25fa2V5O1xyXG4gICAgICAgIHNhZmVib3gudXBsb2FkVXJsID0gcmVzdWx0LnVwbG9hZF91cmw7XHJcbiAgICAgICAgcmV0dXJuIHNhZmVib3g7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCggZXJyb3IgPT4geyB0aHJvdyBlcnJvciB9KVxyXG4gIH1cclxuXHJcbiAgZGVmYXVsdFNlY3VyaXR5UHJvZmlsZSh1c2VyRW1haWwpe1xyXG4gICAgcmV0dXJuIHRoaXMuc2VjdXJpdHlQcm9maWxlcyh1c2VyRW1haWwpXHJcbiAgICAgIC50aGVuKCBzZWN1cml0eVByb2ZpbGVzID0+XHJcbiAgICAgICAgdGhpcy5lbnRlcnByaXNlU2V0dGluZ3ModXNlckVtYWlsKVxyXG4gICAgICAgICAgLnRoZW4oZW50ZXJwcmlzZVNldHRpbmdzID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIF9maW5kKHNlY3VyaXR5UHJvZmlsZXMsIHByb2ZpbGUgPT4gICBwcm9maWxlLmlkID09IGVudGVycHJpc2VTZXR0aW5ncy5kZWZhdWx0U2VjdXJpdHlQcm9maWxlSWQgKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgICAuY2F0Y2ggKCBlcnJvciA9PiB7IHRocm93IGVycm9yIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBsb2FkQXR0YWNobWVudChzYWZlYm94LCBhdHRhY2htZW50KXtcclxuICAgIGlmIChpc05vZGUpe1xyXG4gICAgICByZXR1cm4gdGhpcy5qc29uQ2xpZW50LnVwbG9hZEZpbGUoc2FmZWJveC51cGxvYWRVcmwsXHJcbiAgICAgICAgICB7ZmlsZVN0cmVhbTogYXR0YWNobWVudC5zdHJlYW0sIGNvbnRlbnRUeXBlOiBhdHRhY2htZW50LmNvbnRlbnRUeXBlLCBmaWxlbmFtZTogYXR0YWNobWVudC5maWxlbmFtZSB9KVxyXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICBhdHRhY2htZW50Lmd1aWQgPSByZXN1bHQudGVtcG9yYXJ5X2RvY3VtZW50LmRvY3VtZW50X2d1aWRcclxuICAgICAgICAgIHJldHVybiBhdHRhY2htZW50O1xyXG4gICAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5qc29uQ2xpZW50LnVwbG9hZEZpbGUoc2FmZWJveC51cGxvYWRVcmwsIHtmaWxlOiBhdHRhY2htZW50LmZpbGUgfSApXHJcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgIGF0dGFjaG1lbnQuZ3VpZCA9IHJlc3VsdC50ZW1wb3JhcnlfZG9jdW1lbnQuZG9jdW1lbnRfZ3VpZFxyXG4gICAgICAgICAgcmV0dXJuIGF0dGFjaG1lbnQ7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBjb21taXRTYWZlYm94KHNhZmVib3gpe1xyXG4gICAgcmV0dXJuIHRoaXMuanNvbkNsaWVudC5jb21taXRTYWZlYm94KHNhZmVib3gudG9Kc29uKCkpXHJcbiAgICAgIC50aGVuKHJlc3VsdCA9PiBuZXcgSGVscGVycy5TYWZlYm94UmVzcG9uc2UocmVzdWx0KSlcclxuICAgICAgLmNhdGNoIChlcnJvciA9PiB7dGhyb3cgZXJyb3J9KVxyXG4gIH1cclxuXHJcbiAgc2VjdXJpdHlQcm9maWxlcyh1c2VyRW1haWwpe1xyXG4gICAgcmV0dXJuIHRoaXMuanNvbkNsaWVudC5zZWN1cml0eVByb2ZpbGVzKHVzZXJFbWFpbClcclxuICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgIHJldHVybiByZXN1bHQuc2VjdXJpdHlfcHJvZmlsZXMubWFwKChlKSA9PiBuZXcgSGVscGVycy5TZWN1cml0eVByb2ZpbGUoZSkpO1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGVudGVycHJpc2VTZXR0aW5ncygpe1xyXG4gICAgcmV0dXJuIHRoaXMuanNvbkNsaWVudC5lbnRlcnByaXNlU2V0dGluZ3MoKVxyXG4gICAgLnRoZW4ocmVzdWx0ID0+IG5ldyBIZWxwZXJzLkVudGVycHJpc2VTZXR0aW5ncyhyZXN1bHQpKTtcclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBIZWxwZXJzIGZyb20gJy4vbW9kdWxlcy9IZWxwZXJzL0hlbHBlcnMuanMnXHJcbmltcG9ydCBKc29uQ2xpZW50IGZyb20gJy4vbW9kdWxlcy9Kc29uQ2xpZW50LmpzJ1xyXG5pbXBvcnQgQ2xpZW50IGZyb20gJy4vbW9kdWxlcy9DbGllbnQuanMnXHJcblxyXG52YXIgU2VuZFNlY3VyZSA9IHt9O1xyXG5cclxuU2VuZFNlY3VyZS5Kc29uQ2xpZW50ID0gSnNvbkNsaWVudDtcclxuU2VuZFNlY3VyZS5DbGllbnQgPSBDbGllbnQ7XHJcblNlbmRTZWN1cmUuSGVscGVycyA9IEhlbHBlcnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZW5kU2VjdXJlO1xyXG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsInR5cGUiLCJhcnJheVJlZHVjZSIsImFycmF5IiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluaXRBY2N1bSIsImluZGV4IiwibGVuZ3RoIiwiY3JlYXRlQmFzZUZvciIsImZyb21SaWdodCIsIm9iamVjdCIsImtleXNGdW5jIiwiaXRlcmFibGUiLCJPYmplY3QiLCJwcm9wcyIsImtleSIsImJhc2VUaW1lcyIsIm4iLCJyZXN1bHQiLCJBcnJheSIsImdldFJhd1RhZyIsImlzT3duIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic3ltVG9TdHJpbmdUYWciLCJ0YWciLCJ1bmRlZmluZWQiLCJ1bm1hc2tlZCIsImUiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUdldFRhZyIsInVuZGVmaW5lZFRhZyIsIm51bGxUYWciLCJpc09iamVjdExpa2UiLCJiYXNlSXNBcmd1bWVudHMiLCJhcmdzVGFnIiwic3R1YkZhbHNlIiwiaXNJbmRleCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyZUlzVWludCIsInRlc3QiLCJpc0xlbmd0aCIsImJhc2VJc1R5cGVkQXJyYXkiLCJ0eXBlZEFycmF5VGFncyIsImJhc2VVbmFyeSIsImZ1bmMiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FycmF5IiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzQnVmZmVyIiwiaXNUeXBlIiwiaXNUeXBlZEFycmF5Iiwic2tpcEluZGV4ZXMiLCJTdHJpbmciLCJwdXNoIiwiaXNQcm90b3R5cGUiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJwcm90byIsInByb3RvdHlwZSIsIm9iamVjdFByb3RvIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsImJhc2VLZXlzIiwibmF0aXZlS2V5cyIsImlzRnVuY3Rpb24iLCJmdW5jVGFnIiwiZ2VuVGFnIiwiYXN5bmNUYWciLCJwcm94eVRhZyIsImlzQXJyYXlMaWtlIiwia2V5cyIsImJhc2VGb3JPd24iLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUVhY2giLCJlYWNoRnVuYyIsImNvbGxlY3Rpb24iLCJsaXN0Q2FjaGVDbGVhciIsInRoaXMiLCJfX2RhdGFfXyIsInNpemUiLCJlcSIsIm90aGVyIiwiYXNzb2NJbmRleE9mIiwibGlzdENhY2hlRGVsZXRlIiwiZGF0YSIsImxhc3RJbmRleCIsInBvcCIsInNwbGljZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5Iiwic2V0Iiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJnZXQiLCJzdGFja0hhcyIsImhhcyIsImlzTWFza2VkIiwibWFza1NyY0tleSIsInRvU291cmNlIiwiZnVuY1RvU3RyaW5nIiwiYmFzZUlzTmF0aXZlIiwicGF0dGVybiIsInJlSXNOYXRpdmUiLCJyZUlzSG9zdEN0b3IiLCJnZXRWYWx1ZSIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsIm5hdGl2ZUNyZWF0ZSIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiSEFTSF9VTkRFRklORUQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJtYXBDYWNoZUNsZWFyIiwiaGFzaCIsIm1hcCIsIk1hcCIsInN0cmluZyIsImlzS2V5YWJsZSIsImdldE1hcERhdGEiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwic3RhY2tTZXQiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJTdGFjayIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsInZhbHVlcyIsImFkZCIsImFycmF5U29tZSIsInByZWRpY2F0ZSIsImNhY2hlSGFzIiwiY2FjaGUiLCJlcXVhbEFycmF5cyIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsImZvckVhY2giLCJzZXRUb0FycmF5IiwiZXF1YWxCeVRhZyIsImRhdGFWaWV3VGFnIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJhcnJheUJ1ZmZlclRhZyIsIlVpbnQ4QXJyYXkiLCJib29sVGFnIiwiZGF0ZVRhZyIsIm51bWJlclRhZyIsImVycm9yVGFnIiwibmFtZSIsIm1lc3NhZ2UiLCJyZWdleHBUYWciLCJzdHJpbmdUYWciLCJtYXBUYWciLCJjb252ZXJ0Iiwic2V0VGFnIiwic3ltYm9sVGFnIiwic3ltYm9sVmFsdWVPZiIsImVxdWFsT2JqZWN0cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib3RoUHJvcHMiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib2JqQ3RvciIsIm90aEN0b3IiLCJiYXNlSXNFcXVhbERlZXAiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwiYXJyYXlUYWciLCJvdGhUYWciLCJnZXRUYWciLCJvYmplY3RUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiYmFzZUlzRXF1YWwiLCJiYXNlSXNNYXRjaCIsInNvdXJjZSIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJiYXNlTWF0Y2hlcyIsImlzU3ltYm9sIiwiaXNLZXkiLCJyZUlzUGxhaW5Qcm9wIiwicmVJc0RlZXBQcm9wIiwibWVtb2l6ZSIsInJlc29sdmVyIiwiVHlwZUVycm9yIiwiRlVOQ19FUlJPUl9URVhUIiwibWVtb2l6ZWQiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJDYWNoZSIsIm1lbW9pemVDYXBwZWQiLCJNQVhfTUVNT0laRV9TSVpFIiwiYXJyYXlNYXAiLCJiYXNlVG9TdHJpbmciLCJzeW1ib2xUb1N0cmluZyIsIklORklOSVRZIiwidG9TdHJpbmciLCJjYXN0UGF0aCIsInN0cmluZ1RvUGF0aCIsInRvS2V5IiwiYmFzZUdldCIsInBhdGgiLCJkZWZhdWx0VmFsdWUiLCJiYXNlSGFzSW4iLCJoYXNQYXRoIiwiaGFzRnVuYyIsImhhc0luIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlkZW50aXR5IiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsInByb3BlcnR5IiwiYmFzZUl0ZXJhdGVlIiwiYmFzZVJlZHVjZSIsInJlZHVjZSIsImJhc2VFYWNoIiwiYmFzZU1hcCIsImJhc2VTb21lIiwiaXNJdGVyYXRlZUNhbGwiLCJzb21lIiwiZ3VhcmQiLCJhcnJheUV2ZXJ5IiwiYmFzZUV2ZXJ5IiwiZXZlcnkiLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImZyb21JbmRleCIsImJhc2VGaW5kSW5kZXgiLCJ0b051bWJlciIsIk5BTiIsInZhbHVlT2YiLCJyZXBsYWNlIiwicmVUcmltIiwiaXNCaW5hcnkiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50Iiwic2xpY2UiLCJyZUlzQmFkSGV4IiwidG9GaW5pdGUiLCJzaWduIiwiTUFYX0lOVEVHRVIiLCJ0b0ludGVnZXIiLCJyZW1haW5kZXIiLCJmaW5kSW5kZXgiLCJuYXRpdmVNYXgiLCJyZXF1aXJlJCQwIiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDEiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJCdWZmZXIiLCJuYXRpdmVJc0J1ZmZlciIsIndlYWtNYXBUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQzIiwiYXJyYXlQcm90byIsImNvcmVKc0RhdGEiLCJ1aWQiLCJleGVjIiwiSUVfUFJPVE8iLCJmdW5jUHJvdG8iLCJyZVJlZ0V4cENoYXIiLCJSZWdFeHAiLCJzeW1ib2xQcm90byIsIkRhdGFWaWV3IiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJyZXF1aXJlJCQ2IiwicHJvbWlzZVRhZyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJyZXF1aXJlJCQ3IiwicmVMZWFkaW5nRG90IiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsIm1hdGNoIiwibnVtYmVyIiwicXVvdGUiLCJCYXNlSGVscGVyIiwidW5kZXJzY29yaWZ5IiwicyIsIm0iLCJ0b0xvd2VyQ2FzZSIsIl9yZWR1Y2UiLCJyZXMiLCJfaXNBcnJheSIsIl9tYXAiLCJ1bmRlcnNjb3JpZnlLZXlzIiwiU2VjdXJpdHlQcm9maWxlIiwiY2FtZWxDYXNpZnkiLCJ0b1VwcGVyQ2FzZSIsIl90aGlzIiwic2VhbCIsIkV4dGVuc2lvbkZpbHRlciIsInByb3BlcnR5T3JOdWxsIiwibW9kZSIsImxpc3QiLCJFbnRlcnByaXNlU2V0dGluZ3MiLCJleHRlbnNpb25GaWx0ZXIiLCJDb250YWN0TWV0aG9kIiwiZGVzdGluYXRpb25UeXBlIiwiZGVzdGluYXRpb24iLCJmZXRjaCIsImZzIiwibG9va3VwIiwiaXNOb2RlIiwiRm9ybURhdGEiLCJyZWxlYXNlIiwicmVxdWlyZSIsIndpbmRvdyIsIkF0dGFjaG1lbnQiLCJmaWxlbmFtZSIsImJhc2VuYW1lIiwiY29udGVudFR5cGUiLCJzdHJlYW0iLCJyZWFkRmlsZVN5bmMiLCJfYWxsIiwiZmlsZSIsImd1aWQiLCJTYWZlYm94IiwidXNlckVtYWlsIiwidiIsInByZXZlbnRFeHRlbnNpb25zIiwicHJvZmlsZSIsInNlY3VyaXR5UHJvZmlsZSIsImF0dGFjaG1lbnRzIiwic2VjdXJpdHlfcHJvZmlsZV9pZCIsImlkIiwiZG9jdW1lbnRfaWRzIiwiYXR0IiwiZ3JvdXBfcmVwbGllcyIsImdyb3VwUmVwbGllcyIsImV4cGlyYXRpb25fdmFsdWUiLCJleHBpcmF0aW9uVmFsdWUiLCJleHBpcmF0aW9uX3VuaXQiLCJleHBpcmF0aW9uVW5pdCIsInJldGVudGlvbl9wZXJpb2RfdHlwZSIsInJldGVudGlvblBlcmlvZFR5cGUiLCJyZXRlbnRpb25fcGVyaW9kX3ZhbHVlIiwicmV0ZW50aW9uUGVyaW9kVmFsdWUiLCJyZXRlbnRpb25fcGVyaW9kX3VuaXQiLCJyZXRlbnRpb25QZXJpb2RVbml0IiwiZW5jcnlwdF9tZXNzYWdlIiwiZW5jcnlwdE1lc3NhZ2UiLCJkb3VibGVfZW5jcnlwdGlvbiIsImRvdWJsZUVuY3J5cHRpb24iLCJyZXBseV9lbmFibGVkIiwicmVwbHlFbmFibGVkIiwibm90aWZpY2F0aW9uX2xhbmd1YWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhZmVib3giLCJSZWNpcGllbnQiLCJlbWFpbCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiY29tcGFueU5hbWUiLCJjb250YWN0TWV0aG9kcyIsImNvbnRhY3RfbWV0aG9kcyIsImNvbnRhY3RNZXRob2QiLCJTYWZlYm94UmVzcG9uc2UiLCJwcmV2aWV3VXJsIiwiZW5jcnlwdGlvbktleSIsIkhlbHBlcnMiLCJTZW5kU2VjdXJlRXhjZXB0aW9uIiwiY29kZSIsInJlc3BvbnNlQ29udGVudCIsIkVycm9yIiwiVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXhjZXB0aW9uIiwiSnNvbkNsaWVudCIsImFwaVRva2VuIiwiZW50ZXJwcmlzZUFjY291bnQiLCJlbmRwb2ludCIsImxvY2FsZSIsInVybCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsIkV4Y2VwdGlvbiIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJzdWZmaXhVcmwiLCJyZXF1ZXN0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24tVG9rZW4iLCJtZXRob2QiLCJfZ2V0U2VuZFNlY3VyZUVuZHBvaW50Iiwic2VuZHNlY3VyZUVuZHBvaW50IiwianNvbiIsInN1ZmZpeCIsIl9tYWtlUmVxdWVzdCIsInVwbG9hZFVybCIsIl9hbnkiLCJlbHQiLCJGaWxlIiwiX3VwbG9hZEZpbGVCcm93c2VyIiwiZXhpc3RzU3luYyIsImZpbGVQYXRoIiwiX3VwbG9hZEZpbGVOb2RlIiwiZmlsZVN0cmVhbSIsImFwcGVuZCIsInNhZmVib3hKc29uIiwiQ29udGVudC1UeXBlIiwicGFyc2VJbnQiLCJNYXRoIiwibWF4IiwiZmluZCIsIkNsaWVudCIsImpzb25DbGllbnQiLCJpbml0aWFsaXplU2FmZWJveCIsInJlcXVlc3RzIiwic2J4IiwiaXRlbSIsInVwbG9hZEF0dGFjaG1lbnQiLCJhbGwiLCJjb21taXRTYWZlYm94IiwiZGVmYXVsdFNlY3VyaXR5UHJvZmlsZSIsImNhdGNoIiwiZXJyb3IiLCJuZXdTYWZlYm94IiwicHVibGljRW5jcnlwdGlvbktleSIsInB1YmxpY19lbmNyeXB0aW9uX2tleSIsInVwbG9hZF91cmwiLCJzZWN1cml0eVByb2ZpbGVzIiwiX3RoaXMyIiwiZW50ZXJwcmlzZVNldHRpbmdzIiwiX2ZpbmQiLCJkZWZhdWx0U2VjdXJpdHlQcm9maWxlSWQiLCJhdHRhY2htZW50IiwidXBsb2FkRmlsZSIsInRlbXBvcmFyeV9kb2N1bWVudCIsImRvY3VtZW50X2d1aWQiLCJ0b0pzb24iLCJzZWN1cml0eV9wcm9maWxlcyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkZXZpY2VJZCIsImRldmljZU5hbWUiLCJvbmVUaW1lUGFzc3dvcmQiLCJwb3J0YWxfdXJsIiwiYm9keSIsInRva2VuIiwiZXJyIiwiU2VuZFNlY3VyZSJdLCJtYXBwaW5ncyI6InNDQXlCQSxTQUFTQSxHQUFTQyxHQUNoQixHQUFJQyxTQUFjRCxFQUNsQixPQUFnQixPQUFUQSxJQUEwQixVQUFSQyxHQUE0QixZQUFSQSxHQ2YvQyxRQUFTQyxHQUFZQyxFQUFPQyxFQUFVQyxFQUFhQyxHQUNqRCxHQUFJQyxJQUFRLEVBQ1JDLEVBQWtCLE1BQVRMLEVBQWdCLEVBQUlBLEVBQU1LLE1BS3ZDLEtBSElGLEdBQWFFLElBQ2ZILEVBQWNGLElBQVFJLE1BRWZBLEVBQVFDLEdBQ2ZILEVBQWNELEVBQVNDLEVBQWFGLEVBQU1JLEdBQVFBLEVBQU9KLEVBRTNELE9BQU9FLEdDZlQsUUFBU0ksR0FBY0MsR0FDckIsTUFBTyxVQUFTQyxFQUFRUCxFQUFVUSxHQU1oQyxJQUxBLEdBQUlMLElBQVEsRUFDUk0sRUFBV0MsT0FBT0gsR0FDbEJJLEVBQVFILEVBQVNELEdBQ2pCSCxFQUFTTyxFQUFNUCxPQUVaQSxLQUFVLENBQ2YsR0FBSVEsR0FBTUQsRUFBTUwsRUFBWUYsSUFBV0QsRUFDdkMsSUFBSUgsRUFBU1MsRUFBU0csR0FBTUEsRUFBS0gsTUFBYyxFQUM3QyxNQUdKLE1BQU9GLElDWFgsUUFBU00sR0FBVUMsRUFBR2QsR0FJcEIsSUFIQSxHQUFJRyxJQUFRLEVBQ1JZLEVBQVNDLE1BQU1GLEtBRVZYLEVBQVFXLEdBQ2ZDLEVBQU9aLEdBQVNILEVBQVNHLEVBRTNCLE9BQU9ZLGtFQ1NULFFBQVNFLEdBQVVyQixHQUNq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
