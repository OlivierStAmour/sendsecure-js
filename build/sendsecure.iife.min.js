var SendSecure=function(){"use strict";function t(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function e(t){return function(e,n,r){for(var o=-1,i=Object(e),u=r(e),a=u.length;a--;){var c=u[t?a:++o];if(n(i[c],c,i)===!1)break}return e}}function n(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function r(t,e){return e={exports:{}},t(e,e.exports),e.exports}function o(t){var e=Me.call(t,Re),n=t[Re];try{t[Re]=void 0;var r=!0}catch(t){}var o=Ue.call(t);return r&&(e?t[Re]=n:delete t[Re]),o}function i(t){return Ne.call(t)}function u(t){return null==t?void 0===t?Ve:Le:(t=Object(t),We&&We in t?De(t):Ie(t))}function a(t){return null!=t&&"object"==typeof t}function c(t){return Ze(t)&&He(t)==Qe}function s(){return!1}function f(t,e){return e=null==e?sn:e,!!e&&("number"==typeof t||fn.test(t))&&t>-1&&t%1==0&&t<e}function l(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=pn}function p(t){return dn(t)&&vn(t.length)&&!!Bn[yn(t)]}function h(t){return function(e){return t(e)}}function y(t,e){var n=Yn(t),r=!n&&Xn(t),o=!n&&!r&&tr(t),i=!n&&!r&&!o&&nr(t),u=n||r||o||i,a=u?Qn(t.length,String):[],c=a.length;for(var s in t)!e&&!or.call(t,s)||u&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||er(s,c))||a.push(s);return a}function v(t){var e=t&&t.constructor,n="function"==typeof e&&e.prototype||ur;return t===n}function d(t,e){return function(n){return t(e(n))}}function _(t){if(!pr(t))return hr(t);var e=[];for(var n in Object(t))vr.call(t,n)&&"constructor"!=n&&e.push(n);return e}function b(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function g(t){if(!gr(t))return!1;var e=br(t);return e==jr||e==wr||e==mr||e==Or}function m(t){return null!=t&&Sr(t.length)&&!Pr(t)}function j(t){return zr(t)?Ar(t):Tr(t)}function w(t,e){return t&&Fr(t,e,Cr)}function O(t,e){return function(n,r){if(null==n)return n;if(!Ur(n))return t(n,r);for(var o=n.length,i=e?o:-1,u=Object(n);(e?i--:++i<o)&&r(u[i],i,u)!==!1;);return n}}function k(){this.__data__=[],this.size=0}function P(t,e){return t===e||t!==t&&e!==e}function S(t,e){for(var n=t.length;n--;)if(Ir(t[n][0],e))return n;return-1}function x(t){var e=this.__data__,n=Vr(e,t);if(n<0)return!1;var r=e.length-1;return n==r?e.pop():Jr.call(e,n,1),--this.size,!0}function A(t){var e=this.__data__,n=Hr(e,t);return n<0?void 0:e[n][1]}function T(t){return Qr(this.__data__,t)>-1}function z(t,e){var n=this.__data__,r=Yr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}function E(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function F(){this.__data__=new ao,this.size=0}function C(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}function M(t){return this.__data__.get(t)}function U(t){return this.__data__.has(t)}function R(t){return!!_o&&_o in t}function $(t){if(null!=t){try{return mo.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function K(t){if(!ko(t)||Oo(t))return!1;var e=wo(t)?Fo:xo;return e.test(Po(t))}function N(t,e){return null==t?void 0:t[e]}function q(t,e){var n=Ro(t,e);return Uo(n)?n:void 0}function B(){this.__data__=Vo?Vo(null):{},this.size=0}function D(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}function I(t){var e=this.__data__;if(Go){var n=e[t];return n===Ho?void 0:n}return Qo.call(e,t)?e[t]:void 0}function L(t){var e=this.__data__;return Yo?void 0!==e[t]:ei.call(e,t)}function V(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=ri&&void 0===e?oi:e,this}function W(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function J(){this.size=0,this.__data__={hash:new pi,map:new(yi||hi),string:new pi}}function G(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function H(t,e){var n=t.__data__;return _i(e)?n["string"==typeof e?"string":"hash"]:n.map}function Z(t){var e=gi(this,t).delete(t);return this.size-=e?1:0,e}function Q(t){return ji(this,t).get(t)}function X(t){return Oi(this,t).has(t)}function Y(t,e){var n=Pi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}function tt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function et(t,e){var n=this.__data__;if(n instanceof Ci){var r=n.__data__;if(!Mi||r.length<Ri-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Ui(r)}return n.set(t,e),this.size=n.size,this}function nt(t){var e=this.__data__=new Ki(t);this.size=e.size}function rt(t){return this.__data__.set(t,Vi),this}function ot(t){return this.__data__.has(t)}function it(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Gi;++e<n;)this.add(t[e])}function ut(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function at(t,e){return t.has(e)}function ct(t,e,n,r,o,i){var u=n&ru,a=t.length,c=e.length;if(a!=c&&!(u&&c>a))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var f=-1,l=!0,p=n&ou?new tu:void 0;for(i.set(t,e),i.set(e,t);++f<a;){var h=t[f],y=e[f];if(r)var v=u?r(y,h,f,e,t,i):r(h,y,f,t,e,i);if(void 0!==v){if(v)continue;l=!1;break}if(p){if(!eu(e,function(t,e){if(!nu(p,e)&&(h===t||o(h,t,n,r,i)))return p.push(e)})){l=!1;break}}else if(h!==y&&!o(h,y,n,r,i)){l=!1;break}}return i.delete(t),i.delete(e),l}function st(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function ft(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function lt(t,e,n,r,o,i,u){switch(n){case Tu:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case Au:return!(t.byteLength!=e.byteLength||!i(new pu(t),new pu(e)));case gu:case mu:case Ou:return hu(+t,+e);case ju:return t.name==e.name&&t.message==e.message;case ku:case Su:return t==e+"";case wu:var a=vu;case Pu:var c=r&_u;if(a||(a=du),t.size!=e.size&&!c)return!1;var s=u.get(t);if(s)return s==e;r|=bu,u.set(t,e);var f=yu(a(t),a(e),r,o,i,u);return u.delete(t),f;case xu:if(Eu)return Eu.call(t)==Eu.call(e)}return!1}function pt(t,e,n,r,o,i){var u=n&Mu,a=Cu(t),c=a.length,s=Cu(e),f=s.length;if(c!=f&&!u)return!1;for(var l=c;l--;){var p=a[l];if(!(u?p in e:Ru.call(e,p)))return!1}var h=i.get(t);if(h&&i.get(e))return h==e;var y=!0;i.set(t,e),i.set(e,t);for(var v=u;++l<c;){p=a[l];var d=t[p],_=e[p];if(r)var b=u?r(_,d,p,e,t,i):r(d,_,p,t,e,i);if(!(void 0===b?d===_||o(d,_,n,r,i):b)){y=!1;break}v||(v="constructor"==p)}if(y&&!v){var g=t.constructor,m=e.constructor;g!=m&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof m&&m instanceof m)&&(y=!1)}return i.delete(t),i.delete(e),y}function ht(t,e,n,r,o,i){var u=Pa(t),a=Pa(e),c=za,s=za;u||(c=ka(t),c=c==Ta?Ea:c),a||(s=ka(e),s=s==Ta?Ea:s);var f=c==Ea,l=s==Ea,p=c==s;if(p&&Sa(t)){if(!Sa(e))return!1;u=!0,f=!1}if(p&&!f)return i||(i=new ma),u||xa(t)?ja(t,e,n,r,o,i):wa(t,e,c,n,r,o,i);if(!(n&Aa)){var h=f&&Ca.call(t,"__wrapped__"),y=l&&Ca.call(e,"__wrapped__");if(h||y){var v=h?t.value():t,d=y?e.value():e;return i||(i=new ma),o(v,d,n,r,i)}}return!!p&&(i||(i=new ma),Oa(t,e,n,r,o,i))}function yt(t,e,n,r,o){return t===e||(null==t||null==e||!Ra(t)&&!$a(e)?t!==t&&e!==e:Ua(t,e,n,r,yt,o))}function vt(t,e,n,r){var o=n.length,i=o,u=!r;if(null==t)return!i;for(t=Object(t);o--;){var a=n[o];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++o<i;){a=n[o];var c=a[0],s=t[c],f=a[1];if(u&&a[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Na;if(r)var p=r(s,f,c,t,e,l);if(!(void 0===p?qa(f,s,Ba|Da,r,l):p))return!1}}return!0}function dt(t){return t===t&&!La(t)}function _t(t){for(var e=Ja(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Wa(o)]}return e}function bt(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}function gt(t){var e=Qa(t);return 1==e.length&&e[0][2]?Xa(e[0][0],e[0][1]):function(n){return n===t||Za(n,t,e)}}function mt(t){return"symbol"==typeof t||ec(t)&&tc(t)==nc}function jt(t,e){if(oc(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ic(t))||(ac.test(t)||!uc.test(t)||null!=e&&t in Object(e))}function wt(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(fc);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=t.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(wt.Cache||sc),n}function Ot(t){var e=pc(t,function(t){return n.size===hc&&n.clear(),t}),n=e.cache;return e}function kt(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function Pt(t){if("string"==typeof t)return t;if(kc(t))return Oc(t,Pt)+"";if(Pc(t))return Ac?Ac.call(t):"";var e=t+"";return"0"==e&&1/t==-Sc?"-0":e}function St(t){return null==t?"":zc(t)}function xt(t,e){return Fc(t)?t:Cc(t,e)?[t]:Mc(Uc(t))}function At(t){if("string"==typeof t||$c(t))return t;var e=t+"";return"0"==e&&1/t==-Kc?"-0":e}function Tt(t,e){e=qc(e,t);for(var n=0,r=e.length;null!=t&&n<r;)t=t[Bc(e[n++])];return n&&n==r?t:void 0}function zt(t,e,n){var r=null==t?void 0:Ic(t,e);return void 0===r?n:r}function Et(t,e){return null!=t&&e in Object(t)}function Ft(t,e,n){e=Wc(e,t);for(var r=-1,o=e.length,i=!1;++r<o;){var u=Qc(e[r]);if(!(i=null!=t&&n(t,u)))break;t=t[u]}return i||++r!=o?i:(o=null==t?0:t.length,!!o&&Zc(o)&&Hc(u,o)&&(Gc(t)||Jc(t)))}function Ct(t,e){return null!=t&&ts(t,e,Yc)}function Mt(t,e){return is(t)&&us(e)?as(cs(t),e):function(n){var r=rs(n,t);return void 0===r&&r===e?os(n,t):ns(e,r,ss|fs)}}function Ut(t){return t}function Rt(t){return function(e){return null==e?void 0:e[t]}}function $t(t){return function(e){return ys(e,t)}}function Kt(t){return bs(t)?ds(gs(t)):_s(t)}function Nt(t){return"function"==typeof t?t:null==t?Os:"object"==typeof t?ks(t)?ws(t[0],t[1]):js(t):Ps(t)}function qt(t,e,n,r,o){return o(t,function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)}),n}function Bt(t,e,n){var r=Fs(t)?As:Es,o=arguments.length<3;return r(t,zs(e,4),n,o,Ts)}function Dt(t,e){var n=-1,r=Us(t)?Array(t.length):[];return Ms(t,function(t,o,i){r[++n]=e(t,o,i)}),r}function It(t,e){var n=qs(t)?$s:Ns;return n(t,Ks(e,3))}function Lt(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Vt(t,e){var n=!0;return Ys(t,function(t,r,o){return n=!!e(t,r,o)}),n}function Wt(t,e,n){if(!of(n))return!1;var r=typeof e;return!!("number"==r?nf(n)&&rf(e,n.length):"string"==r&&e in n)&&ef(n[e],t)}function Jt(t,e,n){var r=ff(t)?af:cf;return n&&lf(t,e,n)&&(e=void 0),r(t,sf(e,3))}function Gt(t,e,n){"__proto__"==e&&Of?Of(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Ht(t,e,n){var r=t[e];Af.call(t,e)&&Sf(r,n)&&(void 0!==n||e in t)||Pf(t,e,n)}function Zt(t,e,n,r){var o=!n;n||(n={});for(var i=-1,u=e.length;++i<u;){var a=e[i],c=r?r(n[a],t[a],a,n,t):void 0;void 0===c&&(c=t[a]),o?Ef(n,a,c):zf(n,a,c)}return n}function Qt(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Xt(t,e,n){return e=Uf(void 0===e?t.length-1:e,0),function(){for(var r=arguments,o=-1,i=Uf(r.length-e,0),u=Array(i);++o<i;)u[o]=r[e+o];o=-1;for(var a=Array(e+1);++o<e;)a[o]=r[o];return a[e]=n(u),Mf(t,this,a)}}function Yt(t){return function(){return t}}function te(t){var e=0,n=0;return function(){var r=Vf(),o=Lf-(r-n);if(n=r,o>0){if(++e>=If)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function ee(t,e){return Yf(Xf(t,e,Qf),t+"")}function ne(t){return el(function(e,n){var r=-1,o=n.length,i=o>1?n[o-1]:void 0,u=o>2?n[2]:void 0;for(i=t.length>3&&"function"==typeof i?(o--,i):void 0,u&&nl(n[0],n[1],u)&&(i=o<3?void 0:i,o=1),e=Object(e);++r<o;){var a=n[r];a&&t(e,a,r,i)}return e})}function re(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}function oe(t){if(!il(t))return al(t);var e=ul(t),n=[];for(var r in t)("constructor"!=r||!e&&sl.call(t,r))&&n.push(r);return n}function ie(t){return hl(t)?ll(t,!0):pl(t)}function ue(t,e){var n;return Tl(t,function(t,r,o){return n=e(t,r,o),!n}),!!n}function ae(t,e,n){var r=Ml(t)?El:Cl;return n&&Ul(t,e,n)&&(e=void 0),r(t,Fl(e,3))}function ce(t){return function(e,n,r){var o=Object(e);if(!Nl(e)){var i=Kl(n,3);e=ql(e),n=function(t){return i(o[t],t,o)}}var u=t(e,n,r);return u>-1?o[i?e[u]:u]:void 0}}function se(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function fe(t){if("number"==typeof t)return t;if(Ll(t))return Vl;if(Il(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Il(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Wl,"");var n=Gl.test(t);return n||Hl.test(t)?Zl(t.slice(2),n?2:8):Jl.test(t)?Vl:+t}function le(t){if(!t)return 0===t?t:0;if(t=Xl(t),t===Yl||t===-Yl){var e=t<0?-1:1;return e*tp}return t===t?t:0}function pe(t){var e=np(t),n=e%1;return e===e?n?e-n:e:0}function he(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:up(n);return o<0&&(o=ap(r+o,0)),op(t,ip(e,3),o)}var ye=Array.isArray,ve=ye,de=t,_e=e,be=_e,ge=be(),me=ge,je=n,we="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},Oe="object"==typeof we&&we&&we.Object===Object&&we,ke=Oe,Pe=ke,Se="object"==typeof self&&self&&self.Object===Object&&self,xe=Pe||Se||Function("return this")(),Ae=xe,Te=Ae,ze=Te.Symbol,Ee=ze,Fe=Ee,Ce=Object.prototype,Me=Ce.hasOwnProperty,Ue=Ce.toString,Re=Fe?Fe.toStringTag:void 0,$e=o,Ke=Object.prototype,Ne=Ke.toString,qe=i,Be=Ee,De=$e,Ie=qe,Le="[object Null]",Ve="[object Undefined]",We=Be?Be.toStringTag:void 0,Je=u,Ge=a,He=Je,Ze=Ge,Qe="[object Arguments]",Xe=c,Ye=Xe,tn=Ge,en=Object.prototype,nn=en.hasOwnProperty,rn=en.propertyIsEnumerable,on=Ye(function(){return arguments}())?Ye:function(t){return tn(t)&&nn.call(t,"callee")&&!rn.call(t,"callee")},un=on,an=s,cn=r(function(t,e){var n=Ae,r=an,o="object"==typeof e&&e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o,a=u?n.Buffer:void 0,c=a?a.isBuffer:void 0,s=c||r;t.exports=s}),sn=9007199254740991,fn=/^(?:0|[1-9]\d*)$/,ln=f,pn=9007199254740991,hn=l,yn=Je,vn=hn,dn=Ge,_n="[object Arguments]",bn="[object Array]",gn="[object Boolean]",mn="[object Date]",jn="[object Error]",wn="[object Function]",On="[object Map]",kn="[object Number]",Pn="[object Object]",Sn="[object RegExp]",xn="[object Set]",An="[object String]",Tn="[object WeakMap]",zn="[object ArrayBuffer]",En="[object DataView]",Fn="[object Float32Array]",Cn="[object Float64Array]",Mn="[object Int8Array]",Un="[object Int16Array]",Rn="[object Int32Array]",$n="[object Uint8Array]",Kn="[object Uint8ClampedArray]",Nn="[object Uint16Array]",qn="[object Uint32Array]",Bn={};Bn[Fn]=Bn[Cn]=Bn[Mn]=Bn[Un]=Bn[Rn]=Bn[$n]=Bn[Kn]=Bn[Nn]=Bn[qn]=!0,Bn[_n]=Bn[bn]=Bn[zn]=Bn[gn]=Bn[En]=Bn[mn]=Bn[jn]=Bn[wn]=Bn[On]=Bn[kn]=Bn[Pn]=Bn[Sn]=Bn[xn]=Bn[An]=Bn[Tn]=!1;var Dn=p,In=h,Ln=r(function(t,e){var n=ke,r="object"==typeof e&&e&&!e.nodeType&&e,o=r&&"object"==typeof t&&t&&!t.nodeType&&t,i=o&&o.exports===r,u=i&&n.process,a=function(){try{return u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}),Vn=Dn,Wn=In,Jn=Ln,Gn=Jn&&Jn.isTypedArray,Hn=Gn?Wn(Gn):Vn,Zn=Hn,Qn=je,Xn=un,Yn=ve,tr=cn,er=ln,nr=Zn,rr=Object.prototype,or=rr.hasOwnProperty,ir=y,ur=Object.prototype,ar=v,cr=d,sr=cr,fr=sr(Object.keys,Object),lr=fr,pr=ar,hr=lr,yr=Object.prototype,vr=yr.hasOwnProperty,dr=_,_r=b,br=Je,gr=_r,mr="[object AsyncFunction]",jr="[object Function]",wr="[object GeneratorFunction]",Or="[object Proxy]",kr=g,Pr=kr,Sr=hn,xr=m,Ar=ir,Tr=dr,zr=xr,Er=j,Fr=me,Cr=Er,Mr=w,Ur=xr,Rr=O,$r=Mr,Kr=Rr,Nr=Kr($r),qr=Nr,Br=k,Dr=P,Ir=Dr,Lr=S,Vr=Lr,Wr=Array.prototype,Jr=Wr.splice,Gr=x,Hr=Lr,Zr=A,Qr=Lr,Xr=T,Yr=Lr,to=z,eo=Br,no=Gr,ro=Zr,oo=Xr,io=to;E.prototype.clear=eo,E.prototype.delete=no,E.prototype.get=ro,E.prototype.has=oo,E.prototype.set=io;var uo=E,ao=uo,co=F,so=C,fo=M,lo=U,po=Ae,ho=po["__core-js_shared__"],yo=ho,vo=yo,_o=function(){var t=/[^.]+$/.exec(vo&&vo.keys&&vo.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),bo=R,go=Function.prototype,mo=go.toString,jo=$,wo=kr,Oo=bo,ko=_r,Po=jo,So=/[\\^$.*+?()[\]{}|]/g,xo=/^\[object .+?Constructor\]$/,Ao=Function.prototype,To=Object.prototype,zo=Ao.toString,Eo=To.hasOwnProperty,Fo=RegExp("^"+zo.call(Eo).replace(So,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Co=K,Mo=N,Uo=Co,Ro=Mo,$o=q,Ko=$o,No=Ae,qo=Ko(No,"Map"),Bo=qo,Do=$o,Io=Do(Object,"create"),Lo=Io,Vo=Lo,Wo=B,Jo=D,Go=Lo,Ho="__lodash_hash_undefined__",Zo=Object.prototype,Qo=Zo.hasOwnProperty,Xo=I,Yo=Lo,ti=Object.prototype,ei=ti.hasOwnProperty,ni=L,ri=Lo,oi="__lodash_hash_undefined__",ii=V,ui=Wo,ai=Jo,ci=Xo,si=ni,fi=ii;W.prototype.clear=ui,W.prototype.delete=ai,W.prototype.get=ci,W.prototype.has=si,W.prototype.set=fi;var li=W,pi=li,hi=uo,yi=Bo,vi=J,di=G,_i=di,bi=H,gi=bi,mi=Z,ji=bi,wi=Q,Oi=bi,ki=X,Pi=bi,Si=Y,xi=vi,Ai=mi,Ti=wi,zi=ki,Ei=Si;tt.prototype.clear=xi,tt.prototype.delete=Ai,tt.prototype.get=Ti,tt.prototype.has=zi,tt.prototype.set=Ei;var Fi=tt,Ci=uo,Mi=Bo,Ui=Fi,Ri=200,$i=et,Ki=uo,Ni=co,qi=so,Bi=fo,Di=lo,Ii=$i;nt.prototype.clear=Ni,nt.prototype.delete=qi,nt.prototype.get=Bi,nt.prototype.has=Di,nt.prototype.set=Ii;var Li=nt,Vi="__lodash_hash_undefined__",Wi=rt,Ji=ot,Gi=Fi,Hi=Wi,Zi=Ji;it.prototype.add=it.prototype.push=Hi,it.prototype.has=Zi;var Qi=it,Xi=ut,Yi=at,tu=Qi,eu=Xi,nu=Yi,ru=1,ou=2,iu=ct,uu=Ae,au=uu.Uint8Array,cu=au,su=st,fu=ft,lu=Ee,pu=cu,hu=Dr,yu=iu,vu=su,du=fu,_u=1,bu=2,gu="[object Boolean]",mu="[object Date]",ju="[object Error]",wu="[object Map]",Ou="[object Number]",ku="[object RegExp]",Pu="[object Set]",Su="[object String]",xu="[object Symbol]",Au="[object ArrayBuffer]",Tu="[object DataView]",zu=lu?lu.prototype:void 0,Eu=zu?zu.valueOf:void 0,Fu=lt,Cu=Er,Mu=1,Uu=Object.prototype,Ru=Uu.hasOwnProperty,$u=pt,Ku=$o,Nu=Ae,qu=Ku(Nu,"DataView"),Bu=qu,Du=$o,Iu=Ae,Lu=Du(Iu,"Promise"),Vu=Lu,Wu=$o,Ju=Ae,Gu=Wu(Ju,"Set"),Hu=Gu,Zu=$o,Qu=Ae,Xu=Zu(Qu,"WeakMap"),Yu=Xu,ta=Bu,ea=Bo,na=Vu,ra=Hu,oa=Yu,ia=Je,ua=jo,aa="[object Map]",ca="[object Object]",sa="[object Promise]",fa="[object Set]",la="[object WeakMap]",pa="[object DataView]",ha=ua(ta),ya=ua(ea),va=ua(na),da=ua(ra),_a=ua(oa),ba=ia;(ta&&ba(new ta(new ArrayBuffer(1)))!=pa||ea&&ba(new ea)!=aa||na&&ba(na.resolve())!=sa||ra&&ba(new ra)!=fa||oa&&ba(new oa)!=la)&&(ba=function(t){var e=ia(t),n=e==ca?t.constructor:void 0,r=n?ua(n):"";if(r)switch(r){case ha:return pa;case ya:return aa;case va:return sa;case da:return fa;case _a:return la}return e});var ga=ba,ma=Li,ja=iu,wa=Fu,Oa=$u,ka=ga,Pa=ve,Sa=cn,xa=Zn,Aa=1,Ta="[object Arguments]",za="[object Array]",Ea="[object Object]",Fa=Object.prototype,Ca=Fa.hasOwnProperty,Ma=ht,Ua=Ma,Ra=_r,$a=Ge,Ka=yt,Na=Li,qa=Ka,Ba=1,Da=2,Ia=vt,La=_r,Va=dt,Wa=Va,Ja=Er,Ga=_t,Ha=bt,Za=Ia,Qa=Ga,Xa=Ha,Ya=gt,tc=Je,ec=Ge,nc="[object Symbol]",rc=mt,oc=ve,ic=rc,uc=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ac=/^\w*$/,cc=jt,sc=Fi,fc="Expected a function";wt.Cache=sc;var lc=wt,pc=lc,hc=500,yc=Ot,vc=yc,dc=/^\./,_c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,bc=/\\(\\)?/g,gc=vc(function(t){var e=[];return dc.test(t)&&e.push(""),t.replace(_c,function(t,n,r,o){e.push(r?o.replace(bc,"$1"):n||t)}),e}),mc=gc,jc=kt,wc=Ee,Oc=jc,kc=ve,Pc=rc,Sc=1/0,xc=wc?wc.prototype:void 0,Ac=xc?xc.toString:void 0,Tc=Pt,zc=Tc,Ec=St,Fc=ve,Cc=cc,Mc=mc,Uc=Ec,Rc=xt,$c=rc,Kc=1/0,Nc=At,qc=Rc,Bc=Nc,Dc=Tt,Ic=Dc,Lc=zt,Vc=Et,Wc=Rc,Jc=un,Gc=ve,Hc=ln,Zc=hn,Qc=Nc,Xc=Ft,Yc=Vc,ts=Xc,es=Ct,ns=Ka,rs=Lc,os=es,is=cc,us=Va,as=Ha,cs=Nc,ss=1,fs=2,ls=Mt,ps=Ut,hs=Rt,ys=Dc,vs=$t,ds=hs,_s=vs,bs=cc,gs=Nc,ms=Kt,js=Ya,ws=ls,Os=ps,ks=ve,Ps=ms,Ss=Nt,xs=qt,As=de,Ts=qr,zs=Ss,Es=xs,Fs=ve,Cs=Bt,Ms=qr,Us=xr,Rs=Dt,$s=jc,Ks=Ss,Ns=Rs,qs=ve,Bs=It,Ds=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Is=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),Ls=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var u=o.get;if(void 0!==u)return u.call(r)},Vs=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},Ws=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},Js=function(){function t(){Ds(this,t)}return Is(t,[{key:"underscorifyKeys",value:function(){var t=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},e=Cs(this,function(e,n,r){return e[t(r)]=ve(n)?Bs(n,function(t){return t.underscorifyKeys()}):n,e},{});return e}}]),t}(),Gs=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Bs(t,function(t,e){return n[r(e)]=t}),Object.seal(n),n}return Vs(e,t),e}(Js),Hs=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.mode=r("mode"),n.list=r("list"),Object.seal(n),n}return Vs(e,t),e}(Js),Zs=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(t){return t.replace(/(\_\w)/g,function(t){return t[1].toUpperCase()})};return Bs(t,function(t,e){return n[r(e)]=t}),n.extensionFilter=new Hs(n.extensionFilter),Object.seal(n),n}return Vs(e,t),e}(Js),Qs=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.destinationType=r("destinationType"),n.destination=r("destination"),n}return Vs(e,t),e}(Js),Xs=Lt,Ys=qr,tf=Vt,ef=Dr,nf=xr,rf=ln,of=_r,uf=Wt,af=Xs,cf=tf,sf=Ss,ff=ve,lf=uf,pf=Jt,hf=null,yf=null,vf=null,df=null,_f=!1,bf=null;"undefined"!=typeof process&&"node"===process.release.name?(hf=require("node-fetch"),yf=require("fs"),vf=require("path"),df=require("mime-types").lookup,bf=require("form-data"),_f=!0):(hf=window.fetch,bf=window.FormData);var gf=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return _f?"string"==typeof t?(n.filename=vf.basename(t),n.contentType=df(t),n.stream=yf.readFileSync(t)):pf(["filename","stream","contentType"],function(e){return e in t})&&(n.filename=t.filename,n.contentType=t.contentType,n.stream=t.stream):n.file=t,n.guid=null,Object.seal(n),n}return Vs(e,t),e}(Js),mf=$o,jf=function(){try{var t=mf(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),wf=jf,Of=wf,kf=Gt,Pf=kf,Sf=Dr,xf=Object.prototype,Af=xf.hasOwnProperty,Tf=Ht,zf=Tf,Ef=kf,Ff=Zt,Cf=Qt,Mf=Cf,Uf=Math.max,Rf=Xt,$f=Yt,Kf=$f,Nf=wf,qf=ps,Bf=Nf?function(t,e){return Nf(t,"toString",{configurable:!0,enumerable:!1,value:Kf(e),writable:!0})}:qf,Df=Bf,If=800,Lf=16,Vf=Date.now,Wf=te,Jf=Df,Gf=Wf,Hf=Gf(Jf),Zf=Hf,Qf=ps,Xf=Rf,Yf=Zf,tl=ee,el=tl,nl=uf,rl=ne,ol=re,il=_r,ul=ar,al=ol,cl=Object.prototype,sl=cl.hasOwnProperty,fl=oe,ll=ir,pl=fl,hl=xr,yl=ie,vl=Ff,dl=rl,_l=yl,bl=dl(function(t,e){vl(e,_l(e),t)}),gl=bl,ml=gl,jl=function(t){function e(t,n,r){Ds(this,e);var o=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return o.code=t,o.message=n,o.responseContent=r,o}return Vs(e,t),e}(Error),wl=function(t){function e(t,n){return Ds(this,e),Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n))}return Vs(e,t),e}(jl),Ol=new WeakMap,kl=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return Bs(["guid","subject","securityProfile","message","replyEnabled","uploadUrl","publicEncryptionKey","notificationLanguage"],function(t){return n[t]=null}),n.userEmail=t,Ol.set(n,{recipients:[],attachments:[]}),Object.preventExtensions(n),n}return Vs(e,t),Is(e,[{key:"underscorifyKeys",value:function(){var t=Ls(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"underscorifyKeys",this).call(this);return ml(t,{recipients:Bs(this.recipients,function(t){return t.underscorifyKeys()})})}},{key:"toJson",value:function(){var t=this.securityProfile,e=this.attachments;delete this.securityProfile,delete this.attachments;var n=this.underscorifyKeys();return n.security_profile_id=t.id,n.document_ids=Cs(e,function(t,e){return t.push(e.guid),t},[]),n.group_replies=t.groupReplies.value,n.expiration_value=t.expirationValue.value,n.expiration_unit=t.expirationUnit.value,n.retention_period_type=t.retentionPeriodType.value,n.retention_period_value=t.retentionPeriodValue.value,n.retention_period_unit=t.retentionPeriodUnit.value,n.encrypt_message=t.encryptMessage.value,n.double_encryption=t.doubleEncryption.value,n.reply_enabled=t.replyEnabled.value,n.notification_language="en",JSON.stringify({safebox:n})}},{key:"recipients",set:function(t){if(!ve(t))throw new jl("0","recipients must be an Array of Recipients");Ol.get(this).recipients=t},get:function(){return Ol.get(this).recipients}},{key:"attachments",set:function(t){if(!ve(t))throw new jl("0","attachments must be an Array of Attachment's");Ol.get(this).attachments=t},get:function(){return Ol.get(this).attachments}}]),e}(Js),Pl=new WeakMap,Sl=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.email=r("email"),n.firstName=r("first_name"),n.lastName=r("last_name"),n.companyName=r("company_name"),Pl.set(n,{contactMethods:t&&"contact_methods"in t?Bs(t.contact_methods,function(t){return new Qs(t)}):[]}),Object.seal(n),n}return Vs(e,t),Is(e,[{key:"underscorifyKeys",value:function(){var t=Ls(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"underscorifyKeys",this).call(this);return ml(t,{contact_methods:Bs(this.contactMethods,function(t){return t.underscorifyKeys()})})}},{key:"contactMethods",set:function(t){if(!ve(t))throw new jl("0","contactMethods must be an Array");Pl.get(this).contactMethods=t},get:function(){return Pl.get(this).contactMethods}}]),e}(Js),xl=function(t){function e(t){Ds(this,e);var n=Ws(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)),r=function(e){return t&&e in t?t[e]:null};return n.previewUrl=r("preview_url"),n.encryptionKey=r("encryptionKey"),n.guid=r("guid"),Object.seal(n),n}return Vs(e,t),e}(Js),Al={};Al.SecurityProfile=Gs,Al.EnterpriseSettings=Zs,Al.ExtensionFilter=Hs,Al.ContactMethod=Qs,Al.Attachment=gf,Al.Recipient=Sl,Al.Safebox=kl,Al.SafeboxResponse=xl;var Tl=qr,zl=ue,El=Xi,Fl=Ss,Cl=zl,Ml=ve,Ul=uf,Rl=ae,$l=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";Ds(this,t),this.apiToken=e,this.endpoint=r,this.locale=o,this.enterpriseAccount=n}return Is(t,[{key:"_getSendSecureEndpoint",value:function(t,e){var n=e+"/services/"+t+"/sendsecure/server/url";return hf(n,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new wl(1,"unexpected server response format");return e}throw new jl(t.status,t.statusText)})}},{key:"_makeRequest",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{headers:{"Authorization-Token":this.apiToken},method:"get"};return this._getSendSecureEndpoint(this.enterpriseAccount,this.endpoint).then(function(n){var r=""+n+t;return hf(r,e)}).then(function(t){return t.ok?t.json():t.text().then(function(e){throw new jl(t.status,t.statusText,e)})})}},{key:"newSafebox",value:function(t){var e="api/v2/safeboxes/new?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"securityProfiles",value:function(t){var e="api/v2/enterprises/"+this.enterpriseAccount+"/security_profiles?user_email="+t+"&locale="+this.locale;return this._makeRequest(e)}},{key:"enterpriseSettings",value:function(){var t="api/v2/enterprises/"+this.enterpriseAccount+"/settings?locale="+this.locale;return this._makeRequest(t)}},{key:"uploadFile",value:function(t,e){if(!Rl(["file","filePath","fileStream"],function(t){return t in e}))throw new jl("0","upload File arguments error");if(!_f){if("file"in e&&e.file instanceof File)return this._uploadFileBrowser(t,e.file);throw new jl("0",'"file" argument should be an instance of File')}if("filePath"in e){if(yf.existsSync(e.filePath)){var n=yf.readFileSync(e.filePath),r=e.contentType||df(e.filePath),o=e.filename||vf.basename(e.filePath);return this._uploadFileNode(t,n,r,o)}throw new jl("0",e.filePath+" does not exist")}if(pf(["fileStream","contentType","filename"],function(t){return t in e}))return this._uploadFileNode(t,e.fileStream,e.contentType,e.filename)}},{key:"_uploadFileBrowser",value:function(t,e){var n=new bf;return n.append("file",e,e.name),hf(t,{method:"post",body:n}).then(function(t){if(t.ok)return t.json();throw new jl(t.status,t.statusText)})}},{key:"_uploadFileNode",value:function(t,e,n,r){var o=new bf;return o.append("file",e,r),hf(t,{method:"post",body:o}).then(function(t){if(t.ok)return t.json();throw new jl(t.status,t.statusText)})}},{key:"commitSafebox",value:function(t){var e="api/v2/safeboxes?locale="+this.locale;return this._makeRequest(e,{headers:{"Authorization-Token":this.apiToken,"Content-Type":"application/json"},method:"post",body:t})}}]),t}(),Kl=Ss,Nl=xr,ql=Er,Bl=ce,Dl=se,Il=_r,Ll=rc,Vl=NaN,Wl=/^\s+|\s+$/g,Jl=/^[-+]0x[0-9a-f]+$/i,Gl=/^0b[01]+$/i,Hl=/^0o[0-7]+$/i,Zl=parseInt,Ql=fe,Xl=Ql,Yl=1/0,tp=1.7976931348623157e308,ep=le,np=ep,rp=pe,op=Dl,ip=Ss,up=rp,ap=Math.max,cp=he,sp=Bl,fp=cp,lp=sp(fp),pp=lp,hp=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"https://portal.xmedius.com",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en";Ds(this,t),this.apiToken=e,this.enterpriseAccount=n,this.endpoint=r,this.locale=o,this.jsonClient=new $l(e,n,r,o)}return Is(t,[{key:"submitSafebox",value:function(t){var e=this;return this.initializeSafebox(t).then(function(t){var n=Bs(t.attachments,function(n){return e.uploadAttachment(t,n)});return Promise.all(n).then(function(e){return t.attachments=e,t})}).then(function(t){return t.securityProfile?e.commitSafebox(t):e.defaultSecurityProfile(t.userEmail).then(function(n){return t.securityProfile=n,e.commitSafebox(t)})}).catch(function(t){throw t})}},{key:"initializeSafebox",value:function(t){return this.jsonClient.newSafebox(t.userEmail).then(function(e){return t.guid=e.guid,t.publicEncryptionKey=e.public_encryption_key,t.uploadUrl=e.upload_url,t}).catch(function(t){throw t})}},{key:"defaultSecurityProfile",value:function(t){var e=this;return this.securityProfiles(t).then(function(n){return e.enterpriseSettings(t).then(function(t){return pp(n,function(e){return e.id==t.defaultSecurityProfileId})})}).catch(function(t){throw t})}},{key:"uploadAttachment",value:function(t,e){return _f?this.jsonClient.uploadFile(t.uploadUrl,{fileStream:e.stream,contentType:e.contentType,filename:e.filename}).then(function(t){return e.guid=t.temporary_document.document_guid,e}):this.jsonClient.uploadFile(t.uploadUrl,{file:e.file}).then(function(t){return e.guid=t.temporary_document.document_guid,e})}},{key:"commitSafebox",value:function(t){return this.jsonClient.commitSafebox(t.toJson()).then(function(t){return new Al.SafeboxResponse(t)}).catch(function(t){throw t})}},{key:"securityProfiles",value:function(t){return this.jsonClient.securityProfiles(t).then(function(t){return t.security_profiles.map(function(t){return new Al.SecurityProfile(t)})})}},{key:"enterpriseSettings",value:function(){return this.jsonClient.enterpriseSettings().then(function(t){return new Al.EnterpriseSettings(t)})}}],[{key:"getUserToken",value:function(t,e,n,r,o){var i=(arguments.length>5&&void 0!==arguments[5]?arguments[5]:"sendsecure-js",
arguments[6]),u=arguments[7],a=i+"/services/"+t+"/portal/host";return hf(a,{method:"get"}).then(function(t){if(t.ok){var e=t.text();if(""===e)throw new wl(1,"unexpected server response format");return e}throw new jl(t.status,t.statusText)}).then(function(i){var a=i+"api/user_token",c=new bf;return c.append("permalink",t),c.append("username",e),c.append("password",n),u&&c.append("otp",u),c.append("application_type","sendsecure-js"),c.append("device_id",r),c.append("device_name",o),hf(a,{method:"POST",body:c}).then(function(t){var e=t.json();if(!e)throw new jl(t.status,t.statusText);return e}).then(function(t){if(t.result)return t.token;throw new jl(t.code,t.message)})}).catch(function(t){if(t instanceof jl)throw t;throw new jl(t.code,t.message)})}}]),t}(),yp={};return yp.JsonClient=$l,yp.Client=hp,yp.Helpers=Al,yp}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
